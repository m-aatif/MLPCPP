/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AFC_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace afarcloud {

int _kVehicleTypeValues[] = {
  VehicleType::AUAV,
  VehicleType::RUAV,
  VehicleType::AGV,
  VehicleType::RGV,
  VehicleType::UAV,
  VehicleType::UGV,
  VehicleType::Tractor
};
const char* _kVehicleTypeNames[] = {
  "AUAV",
  "RUAV",
  "AGV",
  "RGV",
  "UAV",
  "UGV",
  "Tractor"
};
const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kVehicleTypeValues, _kVehicleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskTypeValues[] = {
  TaskType::TRANSIT,
  TaskType::SURVEY,
  TaskType::INSPECT,
  TaskType::HOTPOINT,
  TaskType::FOLLOW_TARGET,
  TaskType::ACTIVE_TRACK,
  TaskType::PANORAMA
};
const char* _kTaskTypeNames[] = {
  "TRANSIT",
  "SURVEY",
  "INSPECT",
  "HOTPOINT",
  "FOLLOW_TARGET",
  "ACTIVE_TRACK",
  "PANORAMA"
};
const std::map<int, const char*> _TaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskTypeValues, _kTaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCommandTypeValues[] = {
  CommandType::NAV_TAKEOFF,
  CommandType::NAV_LAND,
  CommandType::NAV_WAYPOINT,
  CommandType::CAMERA_IMAGE,
  CommandType::VIDEO_START_CAPTURE,
  CommandType::VIDEO_STOP_CAPTURE,
  CommandType::NAV_HOTPOINT,
  CommandType::NAV_FOLLOW_TARGET,
  CommandType::NAV_TRACK_SUBJECT,
  CommandType::CAMERA_PANORAMA,
  CommandType::NAV_HOME
};
const char* _kCommandTypeNames[] = {
  "NAV_TAKEOFF",
  "NAV_LAND",
  "NAV_WAYPOINT",
  "CAMERA_IMAGE",
  "VIDEO_START_CAPTURE",
  "VIDEO_STOP_CAPTURE",
  "NAV_HOTPOINT",
  "NAV_FOLLOW_TARGET",
  "NAV_TRACK_SUBJECT",
  "CAMERA_PANORAMA",
  "NAV_HOME"
};
const std::map<int, const char*> _CommandType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kCommandTypeValues, _kCommandTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskCommandStatusValues[] = {
  TaskCommandStatus::NotAssigned,
  TaskCommandStatus::NotStarted,
  TaskCommandStatus::Running,
  TaskCommandStatus::Finished,
  TaskCommandStatus::Stopped
};
const char* _kTaskCommandStatusNames[] = {
  "NotAssigned",
  "NotStarted",
  "Running",
  "Finished",
  "Stopped"
};
const std::map<int, const char*> _TaskCommandStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaskCommandStatusValues, _kTaskCommandStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskRegionTypeValues[] = {
  TaskRegionType::Point,
  TaskRegionType::Column,
  TaskRegionType::Area,
  TaskRegionType::Circle,
  TaskRegionType::Dynamic
};
const char* _kTaskRegionTypeNames[] = {
  "Point",
  "Column",
  "Area",
  "Circle",
  "Dynamic"
};
const std::map<int, const char*> _TaskRegionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaskRegionTypeValues, _kTaskRegionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEquipmentTypeValues[] = {
  EquipmentType::CAMERA_360,
  EquipmentType::CAMERA_PHOTO,
  EquipmentType::CAMERA_VIDEO,
  EquipmentType::CAMERA_TRACK,
  EquipmentType::CAMERA_PANORAMA,
  EquipmentType::CAMERA_FOLLOW,
  EquipmentType::CAMERA_HOTPOINT,
  EquipmentType::IR_CAMERA_PHOTO,
  EquipmentType::IR_CAMERA_VIDEO,
  EquipmentType::WIFI,
  EquipmentType::COLLISION_AVOIDANCE,
  EquipmentType::SPRAYER
};
const char* _kEquipmentTypeNames[] = {
  "CAMERA_360",
  "CAMERA_PHOTO",
  "CAMERA_VIDEO",
  "CAMERA_TRACK",
  "CAMERA_PANORAMA",
  "CAMERA_FOLLOW",
  "CAMERA_HOTPOINT",
  "IR_CAMERA_PHOTO",
  "IR_CAMERA_VIDEO",
  "WIFI",
  "COLLISION_AVOIDANCE",
  "SPRAYER"
};
const std::map<int, const char*> _EquipmentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kEquipmentTypeValues, _kEquipmentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSensorTypeValues[] = {
  SensorType::HUMIDITY,
  SensorType::COLLAR,
  SensorType::PRESSURE
};
const char* _kSensorTypeNames[] = {
  "HUMIDITY",
  "COLLAR",
  "PRESSURE"
};
const std::map<int, const char*> _SensorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSensorTypeValues, _kSensorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Position::~Position() throw() {
}


void Position::__set_longitude(const double val) {
  this->longitude = val;
}

void Position::__set_latitude(const double val) {
  this->latitude = val;
}

void Position::__set_altitude(const double val) {
  this->altitude = val;
}

const char* Position::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Position::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Position::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Position::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Position");

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Position &a, Position &b) {
  using ::std::swap;
  swap(a.longitude, b.longitude);
  swap(a.latitude, b.latitude);
  swap(a.altitude, b.altitude);
  swap(a.__isset, b.__isset);
}

Position::Position(const Position& other0) {
  longitude = other0.longitude;
  latitude = other0.latitude;
  altitude = other0.altitude;
  __isset = other0.__isset;
}
Position& Position::operator=(const Position& other1) {
  longitude = other1.longitude;
  latitude = other1.latitude;
  altitude = other1.altitude;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Position& obj) {
  using apache::thrift::to_string;
  out << "Position(";
  out << "longitude=" << to_string(obj.longitude);
  out << ", " << "latitude=" << to_string(obj.latitude);
  out << ", " << "altitude=" << to_string(obj.altitude);
  out << ")";
  return out;
}


Orientation::~Orientation() throw() {
}


void Orientation::__set_roll(const double val) {
  this->roll = val;
}

void Orientation::__set_pitch(const double val) {
  this->pitch = val;
}

void Orientation::__set_yaw(const double val) {
  this->yaw = val;
}

const char* Orientation::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Orientation::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Orientation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Orientation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Orientation");

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Orientation &a, Orientation &b) {
  using ::std::swap;
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

Orientation::Orientation(const Orientation& other2) {
  roll = other2.roll;
  pitch = other2.pitch;
  yaw = other2.yaw;
  __isset = other2.__isset;
}
Orientation& Orientation::operator=(const Orientation& other3) {
  roll = other3.roll;
  pitch = other3.pitch;
  yaw = other3.yaw;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Orientation& obj) {
  using apache::thrift::to_string;
  out << "Orientation(";
  out << "roll=" << to_string(obj.roll);
  out << ", " << "pitch=" << to_string(obj.pitch);
  out << ", " << "yaw=" << to_string(obj.yaw);
  out << ")";
  return out;
}


Region::~Region() throw() {
}


void Region::__set_area(const std::vector<Position> & val) {
  this->area = val;
}

const char* Region::ascii_fingerprint = "CA3A04F6586943FB009547C6AECE5B89";
const uint8_t Region::binary_fingerprint[16] = {0xCA,0x3A,0x04,0xF6,0x58,0x69,0x43,0xFB,0x00,0x95,0x47,0xC6,0xAE,0xCE,0x5B,0x89};

uint32_t Region::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->area.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->area.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->area[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Region::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Region");

  xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->area.size()));
    std::vector<Position> ::const_iterator _iter9;
    for (_iter9 = this->area.begin(); _iter9 != this->area.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Region &a, Region &b) {
  using ::std::swap;
  swap(a.area, b.area);
  swap(a.__isset, b.__isset);
}

Region::Region(const Region& other10) {
  area = other10.area;
  __isset = other10.__isset;
}
Region& Region::operator=(const Region& other11) {
  area = other11.area;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Region& obj) {
  using apache::thrift::to_string;
  out << "Region(";
  out << "area=" << to_string(obj.area);
  out << ")";
  return out;
}


DetectionRegion::~DetectionRegion() throw() {
}


void DetectionRegion::__set_Id(const int32_t val) {
  this->Id = val;
}

void DetectionRegion::__set_time(const int64_t val) {
  this->time = val;
}

void DetectionRegion::__set_location(const Region& val) {
  this->location = val;
}

void DetectionRegion::__set_label(const std::string& val) {
  this->label = val;
}

const char* DetectionRegion::ascii_fingerprint = "8BFD3256C426262EDB341D6CAA98AF2C";
const uint8_t DetectionRegion::binary_fingerprint[16] = {0x8B,0xFD,0x32,0x56,0xC4,0x26,0x26,0x2E,0xDB,0x34,0x1D,0x6C,0xAA,0x98,0xAF,0x2C};

uint32_t DetectionRegion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DetectionRegion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DetectionRegion");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DetectionRegion &a, DetectionRegion &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.time, b.time);
  swap(a.location, b.location);
  swap(a.label, b.label);
  swap(a.__isset, b.__isset);
}

DetectionRegion::DetectionRegion(const DetectionRegion& other12) {
  Id = other12.Id;
  time = other12.time;
  location = other12.location;
  label = other12.label;
  __isset = other12.__isset;
}
DetectionRegion& DetectionRegion::operator=(const DetectionRegion& other13) {
  Id = other13.Id;
  time = other13.time;
  location = other13.location;
  label = other13.label;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DetectionRegion& obj) {
  using apache::thrift::to_string;
  out << "DetectionRegion(";
  out << "Id=" << to_string(obj.Id);
  out << ", " << "time=" << to_string(obj.time);
  out << ", " << "location=" << to_string(obj.location);
  out << ", " << "label=" << to_string(obj.label);
  out << ")";
  return out;
}


Battery::~Battery() throw() {
}


void Battery::__set_batteryCapacity(const double val) {
  this->batteryCapacity = val;
}

void Battery::__set_batteryPercentage(const double val) {
  this->batteryPercentage = val;
}

const char* Battery::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t Battery::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t Battery::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->batteryCapacity);
          this->__isset.batteryCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->batteryPercentage);
          this->__isset.batteryPercentage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Battery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Battery");

  xfer += oprot->writeFieldBegin("batteryCapacity", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->batteryCapacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batteryPercentage", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->batteryPercentage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Battery &a, Battery &b) {
  using ::std::swap;
  swap(a.batteryCapacity, b.batteryCapacity);
  swap(a.batteryPercentage, b.batteryPercentage);
  swap(a.__isset, b.__isset);
}

Battery::Battery(const Battery& other14) {
  batteryCapacity = other14.batteryCapacity;
  batteryPercentage = other14.batteryPercentage;
  __isset = other14.__isset;
}
Battery& Battery::operator=(const Battery& other15) {
  batteryCapacity = other15.batteryCapacity;
  batteryPercentage = other15.batteryPercentage;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Battery& obj) {
  using apache::thrift::to_string;
  out << "Battery(";
  out << "batteryCapacity=" << to_string(obj.batteryCapacity);
  out << ", " << "batteryPercentage=" << to_string(obj.batteryPercentage);
  out << ")";
  return out;
}


StateVector::~StateVector() throw() {
}


void StateVector::__set_vehicleId(const int32_t val) {
  this->vehicleId = val;
}

void StateVector::__set_position(const Position& val) {
  this->position = val;
}

void StateVector::__set_orientation(const Orientation& val) {
  this->orientation = val;
}

void StateVector::__set_gimbalPitch(const double val) {
  this->gimbalPitch = val;
__isset.gimbalPitch = true;
}

void StateVector::__set_battery(const Battery& val) {
  this->battery = val;
__isset.battery = true;
}

void StateVector::__set_linearSpeed(const double val) {
  this->linearSpeed = val;
}

void StateVector::__set_lastUpdate(const int64_t val) {
  this->lastUpdate = val;
}

const char* StateVector::ascii_fingerprint = "F6F53304F1C21F736955393350523024";
const uint8_t StateVector::binary_fingerprint[16] = {0xF6,0xF5,0x33,0x04,0xF1,0xC2,0x1F,0x73,0x69,0x55,0x39,0x33,0x50,0x52,0x30,0x24};

uint32_t StateVector::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->orientation.read(iprot);
          this->__isset.orientation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gimbalPitch);
          this->__isset.gimbalPitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->battery.read(iprot);
          this->__isset.battery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->linearSpeed);
          this->__isset.linearSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdate);
          this->__isset.lastUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StateVector::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StateVector");

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orientation", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->orientation.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gimbalPitch) {
    xfer += oprot->writeFieldBegin("gimbalPitch", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->gimbalPitch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.battery) {
    xfer += oprot->writeFieldBegin("battery", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->battery.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("linearSpeed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->linearSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdate", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->lastUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StateVector &a, StateVector &b) {
  using ::std::swap;
  swap(a.vehicleId, b.vehicleId);
  swap(a.position, b.position);
  swap(a.orientation, b.orientation);
  swap(a.gimbalPitch, b.gimbalPitch);
  swap(a.battery, b.battery);
  swap(a.linearSpeed, b.linearSpeed);
  swap(a.lastUpdate, b.lastUpdate);
  swap(a.__isset, b.__isset);
}

StateVector::StateVector(const StateVector& other16) {
  vehicleId = other16.vehicleId;
  position = other16.position;
  orientation = other16.orientation;
  gimbalPitch = other16.gimbalPitch;
  battery = other16.battery;
  linearSpeed = other16.linearSpeed;
  lastUpdate = other16.lastUpdate;
  __isset = other16.__isset;
}
StateVector& StateVector::operator=(const StateVector& other17) {
  vehicleId = other17.vehicleId;
  position = other17.position;
  orientation = other17.orientation;
  gimbalPitch = other17.gimbalPitch;
  battery = other17.battery;
  linearSpeed = other17.linearSpeed;
  lastUpdate = other17.lastUpdate;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StateVector& obj) {
  using apache::thrift::to_string;
  out << "StateVector(";
  out << "vehicleId=" << to_string(obj.vehicleId);
  out << ", " << "position=" << to_string(obj.position);
  out << ", " << "orientation=" << to_string(obj.orientation);
  out << ", " << "gimbalPitch="; (obj.__isset.gimbalPitch ? (out << to_string(obj.gimbalPitch)) : (out << "<null>"));
  out << ", " << "battery="; (obj.__isset.battery ? (out << to_string(obj.battery)) : (out << "<null>"));
  out << ", " << "linearSpeed=" << to_string(obj.linearSpeed);
  out << ", " << "lastUpdate=" << to_string(obj.lastUpdate);
  out << ")";
  return out;
}


Equipment::~Equipment() throw() {
}


void Equipment::__set_id(const int32_t val) {
  this->id = val;
__isset.id = true;
}

void Equipment::__set_isoId(const std::string& val) {
  this->isoId = val;
__isset.isoId = true;
}

void Equipment::__set_type(const EquipmentType::type val) {
  this->type = val;
}

void Equipment::__set_name(const std::string& val) {
  this->name = val;
}

const char* Equipment::ascii_fingerprint = "09D2286AACC284EE3F781DC911176E22";
const uint8_t Equipment::binary_fingerprint[16] = {0x09,0xD2,0x28,0x6A,0xAC,0xC2,0x84,0xEE,0x3F,0x78,0x1D,0xC9,0x11,0x17,0x6E,0x22};

uint32_t Equipment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->isoId);
          this->__isset.isoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast18;
          xfer += iprot->readI32(ecast18);
          this->type = (EquipmentType::type)ecast18;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Equipment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Equipment");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isoId) {
    xfer += oprot->writeFieldBegin("isoId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->isoId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Equipment &a, Equipment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.isoId, b.isoId);
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

Equipment::Equipment(const Equipment& other19) {
  id = other19.id;
  isoId = other19.isoId;
  type = other19.type;
  name = other19.name;
  __isset = other19.__isset;
}
Equipment& Equipment::operator=(const Equipment& other20) {
  id = other20.id;
  isoId = other20.isoId;
  type = other20.type;
  name = other20.name;
  __isset = other20.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Equipment& obj) {
  using apache::thrift::to_string;
  out << "Equipment(";
  out << "id="; (obj.__isset.id ? (out << to_string(obj.id)) : (out << "<null>"));
  out << ", " << "isoId="; (obj.__isset.isoId ? (out << to_string(obj.isoId)) : (out << "<null>"));
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


Vehicle::~Vehicle() throw() {
}


void Vehicle::__set_id(const int32_t val) {
  this->id = val;
}

void Vehicle::__set_name(const std::string& val) {
  this->name = val;
}

void Vehicle::__set_type(const VehicleType::type val) {
  this->type = val;
}

void Vehicle::__set_maxSpeed(const double val) {
  this->maxSpeed = val;
}

void Vehicle::__set_maxRunningTime(const int32_t val) {
  this->maxRunningTime = val;
}

void Vehicle::__set_equipments(const std::vector<Equipment> & val) {
  this->equipments = val;
}

void Vehicle::__set_capabilities(const std::vector<TaskType::type> & val) {
  this->capabilities = val;
}

void Vehicle::__set_stateVector(const StateVector& val) {
  this->stateVector = val;
}

void Vehicle::__set_safetyDistance(const double val) {
  this->safetyDistance = val;
}

void Vehicle::__set_isOnline(const bool val) {
  this->isOnline = val;
}

const char* Vehicle::ascii_fingerprint = "B4CE029BAA14A770F199021FE49FD056";
const uint8_t Vehicle::binary_fingerprint[16] = {0xB4,0xCE,0x02,0x9B,0xAA,0x14,0xA7,0x70,0xF1,0x99,0x02,0x1F,0xE4,0x9F,0xD0,0x56};

uint32_t Vehicle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast21;
          xfer += iprot->readI32(ecast21);
          this->type = (VehicleType::type)ecast21;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxSpeed);
          this->__isset.maxSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRunningTime);
          this->__isset.maxRunningTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipments.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->equipments.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->equipments[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.equipments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->capabilities.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->capabilities.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              int32_t ecast32;
              xfer += iprot->readI32(ecast32);
              this->capabilities[_i31] = (TaskType::type)ecast32;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stateVector.read(iprot);
          this->__isset.stateVector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->safetyDistance);
          this->__isset.safetyDistance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isOnline);
          this->__isset.isOnline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vehicle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Vehicle");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxSpeed", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->maxSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRunningTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxRunningTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipments", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equipments.size()));
    std::vector<Equipment> ::const_iterator _iter33;
    for (_iter33 = this->equipments.begin(); _iter33 != this->equipments.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->capabilities.size()));
    std::vector<TaskType::type> ::const_iterator _iter34;
    for (_iter34 = this->capabilities.begin(); _iter34 != this->capabilities.end(); ++_iter34)
    {
      xfer += oprot->writeI32((int32_t)(*_iter34));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stateVector", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->stateVector.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("safetyDistance", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->safetyDistance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isOnline", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->isOnline);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Vehicle &a, Vehicle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.maxSpeed, b.maxSpeed);
  swap(a.maxRunningTime, b.maxRunningTime);
  swap(a.equipments, b.equipments);
  swap(a.capabilities, b.capabilities);
  swap(a.stateVector, b.stateVector);
  swap(a.safetyDistance, b.safetyDistance);
  swap(a.isOnline, b.isOnline);
  swap(a.__isset, b.__isset);
}

Vehicle::Vehicle(const Vehicle& other35) {
  id = other35.id;
  name = other35.name;
  type = other35.type;
  maxSpeed = other35.maxSpeed;
  maxRunningTime = other35.maxRunningTime;
  equipments = other35.equipments;
  capabilities = other35.capabilities;
  stateVector = other35.stateVector;
  safetyDistance = other35.safetyDistance;
  isOnline = other35.isOnline;
  __isset = other35.__isset;
}
Vehicle& Vehicle::operator=(const Vehicle& other36) {
  id = other36.id;
  name = other36.name;
  type = other36.type;
  maxSpeed = other36.maxSpeed;
  maxRunningTime = other36.maxRunningTime;
  equipments = other36.equipments;
  capabilities = other36.capabilities;
  stateVector = other36.stateVector;
  safetyDistance = other36.safetyDistance;
  isOnline = other36.isOnline;
  __isset = other36.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Vehicle& obj) {
  using apache::thrift::to_string;
  out << "Vehicle(";
  out << "id=" << to_string(obj.id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "maxSpeed=" << to_string(obj.maxSpeed);
  out << ", " << "maxRunningTime=" << to_string(obj.maxRunningTime);
  out << ", " << "equipments=" << to_string(obj.equipments);
  out << ", " << "capabilities=" << to_string(obj.capabilities);
  out << ", " << "stateVector=" << to_string(obj.stateVector);
  out << ", " << "safetyDistance=" << to_string(obj.safetyDistance);
  out << ", " << "isOnline=" << to_string(obj.isOnline);
  out << ")";
  return out;
}


TaskTemplate::~TaskTemplate() throw() {
}


void TaskTemplate::__set_taskType(const TaskType::type val) {
  this->taskType = val;
}

void TaskTemplate::__set_description(const std::string& val) {
  this->description = val;
}

void TaskTemplate::__set_regionType(const TaskRegionType::type val) {
  this->regionType = val;
}

void TaskTemplate::__set_requiredTypes(const std::vector<EquipmentType::type> & val) {
  this->requiredTypes = val;
}

void TaskTemplate::__set_maxSpeed(const double val) {
  this->maxSpeed = val;
__isset.maxSpeed = true;
}

const char* TaskTemplate::ascii_fingerprint = "A4DB297FB0895E3E5A95CEA7C00C0886";
const uint8_t TaskTemplate::binary_fingerprint[16] = {0xA4,0xDB,0x29,0x7F,0xB0,0x89,0x5E,0x3E,0x5A,0x95,0xCE,0xA7,0xC0,0x0C,0x08,0x86};

uint32_t TaskTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast37;
          xfer += iprot->readI32(ecast37);
          this->taskType = (TaskType::type)ecast37;
          this->__isset.taskType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast38;
          xfer += iprot->readI32(ecast38);
          this->regionType = (TaskRegionType::type)ecast38;
          this->__isset.regionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requiredTypes.clear();
            uint32_t _size39;
            ::apache::thrift::protocol::TType _etype42;
            xfer += iprot->readListBegin(_etype42, _size39);
            this->requiredTypes.resize(_size39);
            uint32_t _i43;
            for (_i43 = 0; _i43 < _size39; ++_i43)
            {
              int32_t ecast44;
              xfer += iprot->readI32(ecast44);
              this->requiredTypes[_i43] = (EquipmentType::type)ecast44;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requiredTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxSpeed);
          this->__isset.maxSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TaskTemplate");

  xfer += oprot->writeFieldBegin("taskType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->taskType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->regionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requiredTypes", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->requiredTypes.size()));
    std::vector<EquipmentType::type> ::const_iterator _iter45;
    for (_iter45 = this->requiredTypes.begin(); _iter45 != this->requiredTypes.end(); ++_iter45)
    {
      xfer += oprot->writeI32((int32_t)(*_iter45));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxSpeed) {
    xfer += oprot->writeFieldBegin("maxSpeed", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->maxSpeed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TaskTemplate &a, TaskTemplate &b) {
  using ::std::swap;
  swap(a.taskType, b.taskType);
  swap(a.description, b.description);
  swap(a.regionType, b.regionType);
  swap(a.requiredTypes, b.requiredTypes);
  swap(a.maxSpeed, b.maxSpeed);
  swap(a.__isset, b.__isset);
}

TaskTemplate::TaskTemplate(const TaskTemplate& other46) {
  taskType = other46.taskType;
  description = other46.description;
  regionType = other46.regionType;
  requiredTypes = other46.requiredTypes;
  maxSpeed = other46.maxSpeed;
  __isset = other46.__isset;
}
TaskTemplate& TaskTemplate::operator=(const TaskTemplate& other47) {
  taskType = other47.taskType;
  description = other47.description;
  regionType = other47.regionType;
  requiredTypes = other47.requiredTypes;
  maxSpeed = other47.maxSpeed;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TaskTemplate& obj) {
  using apache::thrift::to_string;
  out << "TaskTemplate(";
  out << "taskType=" << to_string(obj.taskType);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "regionType=" << to_string(obj.regionType);
  out << ", " << "requiredTypes=" << to_string(obj.requiredTypes);
  out << ", " << "maxSpeed="; (obj.__isset.maxSpeed ? (out << to_string(obj.maxSpeed)) : (out << "<null>"));
  out << ")";
  return out;
}


Task::~Task() throw() {
}


void Task::__set_taskTemplate(const TaskTemplate& val) {
  this->taskTemplate = val;
}

void Task::__set_id(const int32_t val) {
  this->id = val;
}

void Task::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Task::__set_area(const Region& val) {
  this->area = val;
}

void Task::__set_speed(const double val) {
  this->speed = val;
}

void Task::__set_altitude(const double val) {
  this->altitude = val;
}

void Task::__set_range(const double val) {
  this->range = val;
}

void Task::__set_timeLapse(const int32_t val) {
  this->timeLapse = val;
}

void Task::__set_bearing(const Orientation& val) {
  this->bearing = val;
}

void Task::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void Task::__set_endTime(const int64_t val) {
  this->endTime = val;
}

void Task::__set_taskStatus(const TaskCommandStatus::type val) {
  this->taskStatus = val;
}

void Task::__set_assignedVehicleId(const int32_t val) {
  this->assignedVehicleId = val;
}

void Task::__set_parentTaskId(const int32_t val) {
  this->parentTaskId = val;
}

void Task::__set_partfields(const std::vector<PartField> & val) {
  this->partfields = val;
__isset.partfields = true;
}

void Task::__set_treatmentGrids(const std::vector<TreatmentGrid> & val) {
  this->treatmentGrids = val;
__isset.treatmentGrids = true;
}

void Task::__set_repeatCount(const int32_t val) {
  this->repeatCount = val;
}

const char* Task::ascii_fingerprint = "73EF016965F95AE68BA51B233859D353";
const uint8_t Task::binary_fingerprint[16] = {0x73,0xEF,0x01,0x69,0x65,0xF9,0x5A,0xE6,0x8B,0xA5,0x1B,0x23,0x38,0x59,0xD3,0x53};

uint32_t Task::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->taskTemplate.read(iprot);
          this->__isset.taskTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->area.read(iprot);
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeLapse);
          this->__isset.timeLapse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bearing.read(iprot);
          this->__isset.bearing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast48;
          xfer += iprot->readI32(ecast48);
          this->taskStatus = (TaskCommandStatus::type)ecast48;
          this->__isset.taskStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->assignedVehicleId);
          this->__isset.assignedVehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parentTaskId);
          this->__isset.parentTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partfields.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->partfields.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->partfields[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.partfields = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->treatmentGrids.clear();
            uint32_t _size54;
            ::apache::thrift::protocol::TType _etype57;
            xfer += iprot->readListBegin(_etype57, _size54);
            this->treatmentGrids.resize(_size54);
            uint32_t _i58;
            for (_i58 = 0; _i58 < _size54; ++_i58)
            {
              xfer += this->treatmentGrids[_i58].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.treatmentGrids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->repeatCount);
          this->__isset.repeatCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Task::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Task");

  xfer += oprot->writeFieldBegin("taskTemplate", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->taskTemplate.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->area.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->range);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeLapse", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->timeLapse);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bearing", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->bearing.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskStatus", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->taskStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assignedVehicleId", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->assignedVehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentTaskId", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->parentTaskId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.partfields) {
    xfer += oprot->writeFieldBegin("partfields", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partfields.size()));
      std::vector<PartField> ::const_iterator _iter59;
      for (_iter59 = this->partfields.begin(); _iter59 != this->partfields.end(); ++_iter59)
      {
        xfer += (*_iter59).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.treatmentGrids) {
    xfer += oprot->writeFieldBegin("treatmentGrids", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->treatmentGrids.size()));
      std::vector<TreatmentGrid> ::const_iterator _iter60;
      for (_iter60 = this->treatmentGrids.begin(); _iter60 != this->treatmentGrids.end(); ++_iter60)
      {
        xfer += (*_iter60).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("repeatCount", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->repeatCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Task &a, Task &b) {
  using ::std::swap;
  swap(a.taskTemplate, b.taskTemplate);
  swap(a.id, b.id);
  swap(a.missionId, b.missionId);
  swap(a.area, b.area);
  swap(a.speed, b.speed);
  swap(a.altitude, b.altitude);
  swap(a.range, b.range);
  swap(a.timeLapse, b.timeLapse);
  swap(a.bearing, b.bearing);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.taskStatus, b.taskStatus);
  swap(a.assignedVehicleId, b.assignedVehicleId);
  swap(a.parentTaskId, b.parentTaskId);
  swap(a.partfields, b.partfields);
  swap(a.treatmentGrids, b.treatmentGrids);
  swap(a.repeatCount, b.repeatCount);
  swap(a.__isset, b.__isset);
}

Task::Task(const Task& other61) {
  taskTemplate = other61.taskTemplate;
  id = other61.id;
  missionId = other61.missionId;
  area = other61.area;
  speed = other61.speed;
  altitude = other61.altitude;
  range = other61.range;
  timeLapse = other61.timeLapse;
  bearing = other61.bearing;
  startTime = other61.startTime;
  endTime = other61.endTime;
  taskStatus = other61.taskStatus;
  assignedVehicleId = other61.assignedVehicleId;
  parentTaskId = other61.parentTaskId;
  partfields = other61.partfields;
  treatmentGrids = other61.treatmentGrids;
  repeatCount = other61.repeatCount;
  __isset = other61.__isset;
}
Task& Task::operator=(const Task& other62) {
  taskTemplate = other62.taskTemplate;
  id = other62.id;
  missionId = other62.missionId;
  area = other62.area;
  speed = other62.speed;
  altitude = other62.altitude;
  range = other62.range;
  timeLapse = other62.timeLapse;
  bearing = other62.bearing;
  startTime = other62.startTime;
  endTime = other62.endTime;
  taskStatus = other62.taskStatus;
  assignedVehicleId = other62.assignedVehicleId;
  parentTaskId = other62.parentTaskId;
  partfields = other62.partfields;
  treatmentGrids = other62.treatmentGrids;
  repeatCount = other62.repeatCount;
  __isset = other62.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Task& obj) {
  using apache::thrift::to_string;
  out << "Task(";
  out << "taskTemplate=" << to_string(obj.taskTemplate);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "missionId=" << to_string(obj.missionId);
  out << ", " << "area=" << to_string(obj.area);
  out << ", " << "speed=" << to_string(obj.speed);
  out << ", " << "altitude=" << to_string(obj.altitude);
  out << ", " << "range=" << to_string(obj.range);
  out << ", " << "timeLapse=" << to_string(obj.timeLapse);
  out << ", " << "bearing=" << to_string(obj.bearing);
  out << ", " << "startTime=" << to_string(obj.startTime);
  out << ", " << "endTime=" << to_string(obj.endTime);
  out << ", " << "taskStatus=" << to_string(obj.taskStatus);
  out << ", " << "assignedVehicleId=" << to_string(obj.assignedVehicleId);
  out << ", " << "parentTaskId=" << to_string(obj.parentTaskId);
  out << ", " << "partfields="; (obj.__isset.partfields ? (out << to_string(obj.partfields)) : (out << "<null>"));
  out << ", " << "treatmentGrids="; (obj.__isset.treatmentGrids ? (out << to_string(obj.treatmentGrids)) : (out << "<null>"));
  out << ", " << "repeatCount=" << to_string(obj.repeatCount);
  out << ")";
  return out;
}


Command::~Command() throw() {
}


void Command::__set_relatedTask(const Task& val) {
  this->relatedTask = val;
}

void Command::__set_id(const int32_t val) {
  this->id = val;
}

void Command::__set_commandType(const CommandType::type val) {
  this->commandType = val;
}

void Command::__set_startTime(const int64_t val) {
  this->startTime = val;
}

void Command::__set_endTime(const int64_t val) {
  this->endTime = val;
}

void Command::__set_commandStatus(const TaskCommandStatus::type val) {
  this->commandStatus = val;
}

void Command::__set_params(const std::vector<double> & val) {
  this->params = val;
}

const char* Command::ascii_fingerprint = "C7255F63BDFC6F84840BCDC4DCFD6611";
const uint8_t Command::binary_fingerprint[16] = {0xC7,0x25,0x5F,0x63,0xBD,0xFC,0x6F,0x84,0x84,0x0B,0xCD,0xC4,0xDC,0xFD,0x66,0x11};

uint32_t Command::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relatedTask.read(iprot);
          this->__isset.relatedTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast63;
          xfer += iprot->readI32(ecast63);
          this->commandType = (CommandType::type)ecast63;
          this->__isset.commandType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast64;
          xfer += iprot->readI32(ecast64);
          this->commandStatus = (TaskCommandStatus::type)ecast64;
          this->__isset.commandStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->params.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->params.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += iprot->readDouble(this->params[_i69]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Command::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Command");

  xfer += oprot->writeFieldBegin("relatedTask", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->relatedTask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->commandType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandStatus", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->commandStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->params.size()));
    std::vector<double> ::const_iterator _iter70;
    for (_iter70 = this->params.begin(); _iter70 != this->params.end(); ++_iter70)
    {
      xfer += oprot->writeDouble((*_iter70));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Command &a, Command &b) {
  using ::std::swap;
  swap(a.relatedTask, b.relatedTask);
  swap(a.id, b.id);
  swap(a.commandType, b.commandType);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.commandStatus, b.commandStatus);
  swap(a.params, b.params);
  swap(a.__isset, b.__isset);
}

Command::Command(const Command& other71) {
  relatedTask = other71.relatedTask;
  id = other71.id;
  commandType = other71.commandType;
  startTime = other71.startTime;
  endTime = other71.endTime;
  commandStatus = other71.commandStatus;
  params = other71.params;
  __isset = other71.__isset;
}
Command& Command::operator=(const Command& other72) {
  relatedTask = other72.relatedTask;
  id = other72.id;
  commandType = other72.commandType;
  startTime = other72.startTime;
  endTime = other72.endTime;
  commandStatus = other72.commandStatus;
  params = other72.params;
  __isset = other72.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Command& obj) {
  using apache::thrift::to_string;
  out << "Command(";
  out << "relatedTask=" << to_string(obj.relatedTask);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "commandType=" << to_string(obj.commandType);
  out << ", " << "startTime=" << to_string(obj.startTime);
  out << ", " << "endTime=" << to_string(obj.endTime);
  out << ", " << "commandStatus=" << to_string(obj.commandStatus);
  out << ", " << "params=" << to_string(obj.params);
  out << ")";
  return out;
}


MissionTag::~MissionTag() throw() {
}


void MissionTag::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void MissionTag::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

const char* MissionTag::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t MissionTag::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t MissionTag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionTag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MissionTag");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MissionTag &a, MissionTag &b) {
  using ::std::swap;
  swap(a.missionId, b.missionId);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

MissionTag::MissionTag(const MissionTag& other73) {
  missionId = other73.missionId;
  name = other73.name;
  __isset = other73.__isset;
}
MissionTag& MissionTag::operator=(const MissionTag& other74) {
  missionId = other74.missionId;
  name = other74.name;
  __isset = other74.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MissionTag& obj) {
  using apache::thrift::to_string;
  out << "MissionTag(";
  out << "missionId=" << to_string(obj.missionId);
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ")";
  return out;
}


Mission::~Mission() throw() {
}


void Mission::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Mission::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Mission::__set_navigationArea(const Region& val) {
  this->navigationArea = val;
}

void Mission::__set_forbiddenArea(const std::vector<Region> & val) {
  this->forbiddenArea = val;
}

void Mission::__set_homeLocation(const std::vector<Position> & val) {
  this->homeLocation = val;
}

void Mission::__set_tasks(const std::vector<Task> & val) {
  this->tasks = val;
}

void Mission::__set_vehicles(const std::vector<Vehicle> & val) {
  this->vehicles = val;
}

void Mission::__set_commands(const std::vector<Command> & val) {
  this->commands = val;
__isset.commands = true;
}

const char* Mission::ascii_fingerprint = "F5AAF5ECD78EB0DBEC627E357CDCAA47";
const uint8_t Mission::binary_fingerprint[16] = {0xF5,0xAA,0xF5,0xEC,0xD7,0x8E,0xB0,0xDB,0xEC,0x62,0x7E,0x35,0x7C,0xDC,0xAA,0x47};

uint32_t Mission::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->navigationArea.read(iprot);
          this->__isset.navigationArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->forbiddenArea.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->forbiddenArea.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += this->forbiddenArea[_i79].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.forbiddenArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->homeLocation.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->homeLocation.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += this->homeLocation[_i84].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.homeLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->tasks.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += this->tasks[_i89].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehicles.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->vehicles.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += this->vehicles[_i94].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehicles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commands.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->commands.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += this->commands[_i99].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mission::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Mission");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("navigationArea", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->navigationArea.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forbiddenArea", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->forbiddenArea.size()));
    std::vector<Region> ::const_iterator _iter100;
    for (_iter100 = this->forbiddenArea.begin(); _iter100 != this->forbiddenArea.end(); ++_iter100)
    {
      xfer += (*_iter100).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeLocation", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->homeLocation.size()));
    std::vector<Position> ::const_iterator _iter101;
    for (_iter101 = this->homeLocation.begin(); _iter101 != this->homeLocation.end(); ++_iter101)
    {
      xfer += (*_iter101).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<Task> ::const_iterator _iter102;
    for (_iter102 = this->tasks.begin(); _iter102 != this->tasks.end(); ++_iter102)
    {
      xfer += (*_iter102).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicles", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vehicles.size()));
    std::vector<Vehicle> ::const_iterator _iter103;
    for (_iter103 = this->vehicles.begin(); _iter103 != this->vehicles.end(); ++_iter103)
    {
      xfer += (*_iter103).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.commands) {
    xfer += oprot->writeFieldBegin("commands", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commands.size()));
      std::vector<Command> ::const_iterator _iter104;
      for (_iter104 = this->commands.begin(); _iter104 != this->commands.end(); ++_iter104)
      {
        xfer += (*_iter104).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Mission &a, Mission &b) {
  using ::std::swap;
  swap(a.missionId, b.missionId);
  swap(a.name, b.name);
  swap(a.navigationArea, b.navigationArea);
  swap(a.forbiddenArea, b.forbiddenArea);
  swap(a.homeLocation, b.homeLocation);
  swap(a.tasks, b.tasks);
  swap(a.vehicles, b.vehicles);
  swap(a.commands, b.commands);
  swap(a.__isset, b.__isset);
}

Mission::Mission(const Mission& other105) {
  missionId = other105.missionId;
  name = other105.name;
  navigationArea = other105.navigationArea;
  forbiddenArea = other105.forbiddenArea;
  homeLocation = other105.homeLocation;
  tasks = other105.tasks;
  vehicles = other105.vehicles;
  commands = other105.commands;
  __isset = other105.__isset;
}
Mission& Mission::operator=(const Mission& other106) {
  missionId = other106.missionId;
  name = other106.name;
  navigationArea = other106.navigationArea;
  forbiddenArea = other106.forbiddenArea;
  homeLocation = other106.homeLocation;
  tasks = other106.tasks;
  vehicles = other106.vehicles;
  commands = other106.commands;
  __isset = other106.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Mission& obj) {
  using apache::thrift::to_string;
  out << "Mission(";
  out << "missionId=" << to_string(obj.missionId);
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "navigationArea=" << to_string(obj.navigationArea);
  out << ", " << "forbiddenArea=" << to_string(obj.forbiddenArea);
  out << ", " << "homeLocation=" << to_string(obj.homeLocation);
  out << ", " << "tasks=" << to_string(obj.tasks);
  out << ", " << "vehicles=" << to_string(obj.vehicles);
  out << ", " << "commands="; (obj.__isset.commands ? (out << to_string(obj.commands)) : (out << "<null>"));
  out << ")";
  return out;
}


Alarm::~Alarm() throw() {
}


void Alarm::__set_alarmId(const int32_t val) {
  this->alarmId = val;
}

void Alarm::__set_vehicleId(const int32_t val) {
  this->vehicleId = val;
}

void Alarm::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Alarm::__set_alarmType(const int32_t val) {
  this->alarmType = val;
}

void Alarm::__set_alarmCode(const int32_t val) {
  this->alarmCode = val;
}

void Alarm::__set_description(const std::string& val) {
  this->description = val;
}

void Alarm::__set_time(const int64_t val) {
  this->time = val;
}

const char* Alarm::ascii_fingerprint = "073B9BBCFBD314AC8815F1B9106F4F3A";
const uint8_t Alarm::binary_fingerprint[16] = {0x07,0x3B,0x9B,0xBC,0xFB,0xD3,0x14,0xAC,0x88,0x15,0xF1,0xB9,0x10,0x6F,0x4F,0x3A};

uint32_t Alarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmId);
          this->__isset.alarmId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmType);
          this->__isset.alarmType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmCode);
          this->__isset.alarmCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Alarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Alarm");

  xfer += oprot->writeFieldBegin("alarmId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->alarmId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->alarmType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmCode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->alarmCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Alarm &a, Alarm &b) {
  using ::std::swap;
  swap(a.alarmId, b.alarmId);
  swap(a.vehicleId, b.vehicleId);
  swap(a.missionId, b.missionId);
  swap(a.alarmType, b.alarmType);
  swap(a.alarmCode, b.alarmCode);
  swap(a.description, b.description);
  swap(a.time, b.time);
  swap(a.__isset, b.__isset);
}

Alarm::Alarm(const Alarm& other107) {
  alarmId = other107.alarmId;
  vehicleId = other107.vehicleId;
  missionId = other107.missionId;
  alarmType = other107.alarmType;
  alarmCode = other107.alarmCode;
  description = other107.description;
  time = other107.time;
  __isset = other107.__isset;
}
Alarm& Alarm::operator=(const Alarm& other108) {
  alarmId = other108.alarmId;
  vehicleId = other108.vehicleId;
  missionId = other108.missionId;
  alarmType = other108.alarmType;
  alarmCode = other108.alarmCode;
  description = other108.description;
  time = other108.time;
  __isset = other108.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Alarm& obj) {
  using apache::thrift::to_string;
  out << "Alarm(";
  out << "alarmId=" << to_string(obj.alarmId);
  out << ", " << "vehicleId=" << to_string(obj.vehicleId);
  out << ", " << "missionId=" << to_string(obj.missionId);
  out << ", " << "alarmType=" << to_string(obj.alarmType);
  out << ", " << "alarmCode=" << to_string(obj.alarmCode);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "time=" << to_string(obj.time);
  out << ")";
  return out;
}


SensorData::~SensorData() throw() {
}


void SensorData::__set_sensorUid(const std::string& val) {
  this->sensorUid = val;
}

void SensorData::__set_sensorType(const SensorType::type val) {
  this->sensorType = val;
}

void SensorData::__set_unit(const std::string& val) {
  this->unit = val;
}

void SensorData::__set_value(const double val) {
  this->value = val;
}

void SensorData::__set_sensorPosition(const Position& val) {
  this->sensorPosition = val;
}

const char* SensorData::ascii_fingerprint = "D921FC5DD86D7B7078A851BD70656EF5";
const uint8_t SensorData::binary_fingerprint[16] = {0xD9,0x21,0xFC,0x5D,0xD8,0x6D,0x7B,0x70,0x78,0xA8,0x51,0xBD,0x70,0x65,0x6E,0xF5};

uint32_t SensorData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorUid);
          this->__isset.sensorUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast109;
          xfer += iprot->readI32(ecast109);
          this->sensorType = (SensorType::type)ecast109;
          this->__isset.sensorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sensorPosition.read(iprot);
          this->__isset.sensorPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SensorData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SensorData");

  xfer += oprot->writeFieldBegin("sensorUid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sensorUid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->sensorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorPosition", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->sensorPosition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SensorData &a, SensorData &b) {
  using ::std::swap;
  swap(a.sensorUid, b.sensorUid);
  swap(a.sensorType, b.sensorType);
  swap(a.unit, b.unit);
  swap(a.value, b.value);
  swap(a.sensorPosition, b.sensorPosition);
  swap(a.__isset, b.__isset);
}

SensorData::SensorData(const SensorData& other110) {
  sensorUid = other110.sensorUid;
  sensorType = other110.sensorType;
  unit = other110.unit;
  value = other110.value;
  sensorPosition = other110.sensorPosition;
  __isset = other110.__isset;
}
SensorData& SensorData::operator=(const SensorData& other111) {
  sensorUid = other111.sensorUid;
  sensorType = other111.sensorType;
  unit = other111.unit;
  value = other111.value;
  sensorPosition = other111.sensorPosition;
  __isset = other111.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SensorData& obj) {
  using apache::thrift::to_string;
  out << "SensorData(";
  out << "sensorUid=" << to_string(obj.sensorUid);
  out << ", " << "sensorType=" << to_string(obj.sensorType);
  out << ", " << "unit=" << to_string(obj.unit);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "sensorPosition=" << to_string(obj.sensorPosition);
  out << ")";
  return out;
}


PartField::~PartField() throw() {
}


void PartField::__set_partfieldId(const int32_t val) {
  this->partfieldId = val;
}

void PartField::__set_isoId(const std::string& val) {
  this->isoId = val;
__isset.isoId = true;
}

void PartField::__set_name(const std::string& val) {
  this->name = val;
}

void PartField::__set_borderPoints(const Region& val) {
  this->borderPoints = val;
}

const char* PartField::ascii_fingerprint = "55CC88C0A3B754080197BC9D90E38562";
const uint8_t PartField::binary_fingerprint[16] = {0x55,0xCC,0x88,0xC0,0xA3,0xB7,0x54,0x08,0x01,0x97,0xBC,0x9D,0x90,0xE3,0x85,0x62};

uint32_t PartField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partfieldId);
          this->__isset.partfieldId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->isoId);
          this->__isset.isoId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->borderPoints.read(iprot);
          this->__isset.borderPoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PartField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PartField");

  xfer += oprot->writeFieldBegin("partfieldId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->partfieldId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.isoId) {
    xfer += oprot->writeFieldBegin("isoId", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->isoId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("borderPoints", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->borderPoints.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PartField &a, PartField &b) {
  using ::std::swap;
  swap(a.partfieldId, b.partfieldId);
  swap(a.isoId, b.isoId);
  swap(a.name, b.name);
  swap(a.borderPoints, b.borderPoints);
  swap(a.__isset, b.__isset);
}

PartField::PartField(const PartField& other112) {
  partfieldId = other112.partfieldId;
  isoId = other112.isoId;
  name = other112.name;
  borderPoints = other112.borderPoints;
  __isset = other112.__isset;
}
PartField& PartField::operator=(const PartField& other113) {
  partfieldId = other113.partfieldId;
  isoId = other113.isoId;
  name = other113.name;
  borderPoints = other113.borderPoints;
  __isset = other113.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PartField& obj) {
  using apache::thrift::to_string;
  out << "PartField(";
  out << "partfieldId=" << to_string(obj.partfieldId);
  out << ", " << "isoId="; (obj.__isset.isoId ? (out << to_string(obj.isoId)) : (out << "<null>"));
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "borderPoints=" << to_string(obj.borderPoints);
  out << ")";
  return out;
}


TreatmentGrid::~TreatmentGrid() throw() {
}


void TreatmentGrid::__set_Id(const int32_t val) {
  this->Id = val;
}

void TreatmentGrid::__set_partfieldId(const int32_t val) {
  this->partfieldId = val;
}

void TreatmentGrid::__set_taskId(const int32_t val) {
  this->taskId = val;
}

void TreatmentGrid::__set_numRows(const int32_t val) {
  this->numRows = val;
}

void TreatmentGrid::__set_numCols(const int32_t val) {
  this->numCols = val;
}

void TreatmentGrid::__set_treatmentValue(const std::vector<double> & val) {
  this->treatmentValue = val;
}

const char* TreatmentGrid::ascii_fingerprint = "1E95D76F45124BA6EA5DB65F42EEAC97";
const uint8_t TreatmentGrid::binary_fingerprint[16] = {0x1E,0x95,0xD7,0x6F,0x45,0x12,0x4B,0xA6,0xEA,0x5D,0xB6,0x5F,0x42,0xEE,0xAC,0x97};

uint32_t TreatmentGrid::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Id);
          this->__isset.Id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->partfieldId);
          this->__isset.partfieldId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->taskId);
          this->__isset.taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numRows);
          this->__isset.numRows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numCols);
          this->__isset.numCols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->treatmentValue.clear();
            uint32_t _size114;
            ::apache::thrift::protocol::TType _etype117;
            xfer += iprot->readListBegin(_etype117, _size114);
            this->treatmentValue.resize(_size114);
            uint32_t _i118;
            for (_i118 = 0; _i118 < _size114; ++_i118)
            {
              xfer += iprot->readDouble(this->treatmentValue[_i118]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.treatmentValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TreatmentGrid::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TreatmentGrid");

  xfer += oprot->writeFieldBegin("Id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->Id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partfieldId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->partfieldId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numRows", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->numRows);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numCols", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numCols);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("treatmentValue", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->treatmentValue.size()));
    std::vector<double> ::const_iterator _iter119;
    for (_iter119 = this->treatmentValue.begin(); _iter119 != this->treatmentValue.end(); ++_iter119)
    {
      xfer += oprot->writeDouble((*_iter119));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TreatmentGrid &a, TreatmentGrid &b) {
  using ::std::swap;
  swap(a.Id, b.Id);
  swap(a.partfieldId, b.partfieldId);
  swap(a.taskId, b.taskId);
  swap(a.numRows, b.numRows);
  swap(a.numCols, b.numCols);
  swap(a.treatmentValue, b.treatmentValue);
  swap(a.__isset, b.__isset);
}

TreatmentGrid::TreatmentGrid(const TreatmentGrid& other120) {
  Id = other120.Id;
  partfieldId = other120.partfieldId;
  taskId = other120.taskId;
  numRows = other120.numRows;
  numCols = other120.numCols;
  treatmentValue = other120.treatmentValue;
  __isset = other120.__isset;
}
TreatmentGrid& TreatmentGrid::operator=(const TreatmentGrid& other121) {
  Id = other121.Id;
  partfieldId = other121.partfieldId;
  taskId = other121.taskId;
  numRows = other121.numRows;
  numCols = other121.numCols;
  treatmentValue = other121.treatmentValue;
  __isset = other121.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TreatmentGrid& obj) {
  using apache::thrift::to_string;
  out << "TreatmentGrid(";
  out << "Id=" << to_string(obj.Id);
  out << ", " << "partfieldId=" << to_string(obj.partfieldId);
  out << ", " << "taskId=" << to_string(obj.taskId);
  out << ", " << "numRows=" << to_string(obj.numRows);
  out << ", " << "numCols=" << to_string(obj.numCols);
  out << ", " << "treatmentValue=" << to_string(obj.treatmentValue);
  out << ")";
  return out;
}

} // namespace
