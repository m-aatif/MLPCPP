/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MmtService_H
#define MmtService_H

#include <thrift/TDispatchProcessor.h>
#include "AFC_types.h"

namespace afarcloud {

class MmtServiceIf {
 public:
  virtual ~MmtServiceIf() {}
  virtual void stateVectorUpdate(const int32_t requestId, const StateVector& stateVector) = 0;
  virtual void sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData) = 0;
  virtual void sendPlan(const int32_t requestId, const Mission& plan) = 0;
  virtual void sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId) = 0;
  virtual void sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status) = 0;
  virtual void sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status) = 0;
  virtual void sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status) = 0;
  virtual void sendAlarm(const int32_t missionId, const Alarm& alarm) = 0;
  virtual void ping(std::string& _return) = 0;
};

class MmtServiceIfFactory {
 public:
  typedef MmtServiceIf Handler;

  virtual ~MmtServiceIfFactory() {}

  virtual MmtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MmtServiceIf* /* handler */) = 0;
};

class MmtServiceIfSingletonFactory : virtual public MmtServiceIfFactory {
 public:
  MmtServiceIfSingletonFactory(const boost::shared_ptr<MmtServiceIf>& iface) : iface_(iface) {}
  virtual ~MmtServiceIfSingletonFactory() {}

  virtual MmtServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MmtServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MmtServiceIf> iface_;
};

class MmtServiceNull : virtual public MmtServiceIf {
 public:
  virtual ~MmtServiceNull() {}
  void stateVectorUpdate(const int32_t /* requestId */, const StateVector& /* stateVector */) {
    return;
  }
  void sensorDataUpdate(const int32_t /* requestId */, const std::vector<SensorData> & /* sensorData */) {
    return;
  }
  void sendPlan(const int32_t /* requestId */, const Mission& /* plan */) {
    return;
  }
  void sendError(const int32_t /* errorId */, const std::string& /* errorMessage */, const int32_t /* requestId */) {
    return;
  }
  void sendMissionStatusReport(const int32_t /* missionId */, const TaskCommandStatus::type /* status */) {
    return;
  }
  void sendTaskStatusReport(const int32_t /* missionId */, const int32_t /* taskId */, const TaskCommandStatus::type /* status */) {
    return;
  }
  void sendCommandStatusReport(const int32_t /* missionId */, const int32_t /* commandId */, const TaskCommandStatus::type /* status */) {
    return;
  }
  void sendAlarm(const int32_t /* missionId */, const Alarm& /* alarm */) {
    return;
  }
  void ping(std::string& /* _return */) {
    return;
  }
};

typedef struct _MmtService_stateVectorUpdate_args__isset {
  _MmtService_stateVectorUpdate_args__isset() : requestId(false), stateVector(false) {}
  bool requestId :1;
  bool stateVector :1;
} _MmtService_stateVectorUpdate_args__isset;

class MmtService_stateVectorUpdate_args {
 public:

  static const char* ascii_fingerprint; // = "3ABECBA6BD3F71A827A575AC9B81CF83";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0xBE,0xCB,0xA6,0xBD,0x3F,0x71,0xA8,0x27,0xA5,0x75,0xAC,0x9B,0x81,0xCF,0x83};

  MmtService_stateVectorUpdate_args(const MmtService_stateVectorUpdate_args&);
  MmtService_stateVectorUpdate_args& operator=(const MmtService_stateVectorUpdate_args&);
  MmtService_stateVectorUpdate_args() : requestId(0) {
  }

  virtual ~MmtService_stateVectorUpdate_args() throw();
  int32_t requestId;
  StateVector stateVector;

  _MmtService_stateVectorUpdate_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_stateVector(const StateVector& val);

  bool operator == (const MmtService_stateVectorUpdate_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(stateVector == rhs.stateVector))
      return false;
    return true;
  }
  bool operator != (const MmtService_stateVectorUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_stateVectorUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_stateVectorUpdate_args& obj);
};


class MmtService_stateVectorUpdate_pargs {
 public:

  static const char* ascii_fingerprint; // = "3ABECBA6BD3F71A827A575AC9B81CF83";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0xBE,0xCB,0xA6,0xBD,0x3F,0x71,0xA8,0x27,0xA5,0x75,0xAC,0x9B,0x81,0xCF,0x83};


  virtual ~MmtService_stateVectorUpdate_pargs() throw();
  const int32_t* requestId;
  const StateVector* stateVector;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_stateVectorUpdate_pargs& obj);
};

typedef struct _MmtService_sensorDataUpdate_args__isset {
  _MmtService_sensorDataUpdate_args__isset() : requestId(false), sensorData(false) {}
  bool requestId :1;
  bool sensorData :1;
} _MmtService_sensorDataUpdate_args__isset;

class MmtService_sensorDataUpdate_args {
 public:

  static const char* ascii_fingerprint; // = "19F81F5391BCD3DC5A784881C1A151B8";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF8,0x1F,0x53,0x91,0xBC,0xD3,0xDC,0x5A,0x78,0x48,0x81,0xC1,0xA1,0x51,0xB8};

  MmtService_sensorDataUpdate_args(const MmtService_sensorDataUpdate_args&);
  MmtService_sensorDataUpdate_args& operator=(const MmtService_sensorDataUpdate_args&);
  MmtService_sensorDataUpdate_args() : requestId(0) {
  }

  virtual ~MmtService_sensorDataUpdate_args() throw();
  int32_t requestId;
  std::vector<SensorData>  sensorData;

  _MmtService_sensorDataUpdate_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_sensorData(const std::vector<SensorData> & val);

  bool operator == (const MmtService_sensorDataUpdate_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(sensorData == rhs.sensorData))
      return false;
    return true;
  }
  bool operator != (const MmtService_sensorDataUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sensorDataUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sensorDataUpdate_args& obj);
};


class MmtService_sensorDataUpdate_pargs {
 public:

  static const char* ascii_fingerprint; // = "19F81F5391BCD3DC5A784881C1A151B8";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xF8,0x1F,0x53,0x91,0xBC,0xD3,0xDC,0x5A,0x78,0x48,0x81,0xC1,0xA1,0x51,0xB8};


  virtual ~MmtService_sensorDataUpdate_pargs() throw();
  const int32_t* requestId;
  const std::vector<SensorData> * sensorData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sensorDataUpdate_pargs& obj);
};

typedef struct _MmtService_sendPlan_args__isset {
  _MmtService_sendPlan_args__isset() : requestId(false), plan(false) {}
  bool requestId :1;
  bool plan :1;
} _MmtService_sendPlan_args__isset;

class MmtService_sendPlan_args {
 public:

  static const char* ascii_fingerprint; // = "E131073EF0D306D07674320C9CC809B7";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x31,0x07,0x3E,0xF0,0xD3,0x06,0xD0,0x76,0x74,0x32,0x0C,0x9C,0xC8,0x09,0xB7};

  MmtService_sendPlan_args(const MmtService_sendPlan_args&);
  MmtService_sendPlan_args& operator=(const MmtService_sendPlan_args&);
  MmtService_sendPlan_args() : requestId(0) {
  }

  virtual ~MmtService_sendPlan_args() throw();
  int32_t requestId;
  Mission plan;

  _MmtService_sendPlan_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_plan(const Mission& val);

  bool operator == (const MmtService_sendPlan_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(plan == rhs.plan))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendPlan_args& obj);
};


class MmtService_sendPlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "E131073EF0D306D07674320C9CC809B7";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x31,0x07,0x3E,0xF0,0xD3,0x06,0xD0,0x76,0x74,0x32,0x0C,0x9C,0xC8,0x09,0xB7};


  virtual ~MmtService_sendPlan_pargs() throw();
  const int32_t* requestId;
  const Mission* plan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendPlan_pargs& obj);
};

typedef struct _MmtService_sendError_args__isset {
  _MmtService_sendError_args__isset() : errorId(false), errorMessage(false), requestId(false) {}
  bool errorId :1;
  bool errorMessage :1;
  bool requestId :1;
} _MmtService_sendError_args__isset;

class MmtService_sendError_args {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};

  MmtService_sendError_args(const MmtService_sendError_args&);
  MmtService_sendError_args& operator=(const MmtService_sendError_args&);
  MmtService_sendError_args() : errorId(0), errorMessage(), requestId(0) {
  }

  virtual ~MmtService_sendError_args() throw();
  int32_t errorId;
  std::string errorMessage;
  int32_t requestId;

  _MmtService_sendError_args__isset __isset;

  void __set_errorId(const int32_t val);

  void __set_errorMessage(const std::string& val);

  void __set_requestId(const int32_t val);

  bool operator == (const MmtService_sendError_args & rhs) const
  {
    if (!(errorId == rhs.errorId))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    if (!(requestId == rhs.requestId))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendError_args& obj);
};


class MmtService_sendError_pargs {
 public:

  static const char* ascii_fingerprint; // = "52C6DAB6CF51AF617111F6D3964C6503";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0xC6,0xDA,0xB6,0xCF,0x51,0xAF,0x61,0x71,0x11,0xF6,0xD3,0x96,0x4C,0x65,0x03};


  virtual ~MmtService_sendError_pargs() throw();
  const int32_t* errorId;
  const std::string* errorMessage;
  const int32_t* requestId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendError_pargs& obj);
};

typedef struct _MmtService_sendMissionStatusReport_args__isset {
  _MmtService_sendMissionStatusReport_args__isset() : missionId(false), status(false) {}
  bool missionId :1;
  bool status :1;
} _MmtService_sendMissionStatusReport_args__isset;

class MmtService_sendMissionStatusReport_args {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};

  MmtService_sendMissionStatusReport_args(const MmtService_sendMissionStatusReport_args&);
  MmtService_sendMissionStatusReport_args& operator=(const MmtService_sendMissionStatusReport_args&);
  MmtService_sendMissionStatusReport_args() : missionId(0), status((TaskCommandStatus::type)0) {
  }

  virtual ~MmtService_sendMissionStatusReport_args() throw();
  int32_t missionId;
  TaskCommandStatus::type status;

  _MmtService_sendMissionStatusReport_args__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_status(const TaskCommandStatus::type val);

  bool operator == (const MmtService_sendMissionStatusReport_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendMissionStatusReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendMissionStatusReport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendMissionStatusReport_args& obj);
};


class MmtService_sendMissionStatusReport_pargs {
 public:

  static const char* ascii_fingerprint; // = "20FDD15CF009C5B6C703B6F2C65DFE88";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0xFD,0xD1,0x5C,0xF0,0x09,0xC5,0xB6,0xC7,0x03,0xB6,0xF2,0xC6,0x5D,0xFE,0x88};


  virtual ~MmtService_sendMissionStatusReport_pargs() throw();
  const int32_t* missionId;
  const TaskCommandStatus::type* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendMissionStatusReport_pargs& obj);
};

typedef struct _MmtService_sendTaskStatusReport_args__isset {
  _MmtService_sendTaskStatusReport_args__isset() : missionId(false), taskId(false), status(false) {}
  bool missionId :1;
  bool taskId :1;
  bool status :1;
} _MmtService_sendTaskStatusReport_args__isset;

class MmtService_sendTaskStatusReport_args {
 public:

  static const char* ascii_fingerprint; // = "3C6B5910B2C7A8886AEC90D855401773";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6B,0x59,0x10,0xB2,0xC7,0xA8,0x88,0x6A,0xEC,0x90,0xD8,0x55,0x40,0x17,0x73};

  MmtService_sendTaskStatusReport_args(const MmtService_sendTaskStatusReport_args&);
  MmtService_sendTaskStatusReport_args& operator=(const MmtService_sendTaskStatusReport_args&);
  MmtService_sendTaskStatusReport_args() : missionId(0), taskId(0), status((TaskCommandStatus::type)0) {
  }

  virtual ~MmtService_sendTaskStatusReport_args() throw();
  int32_t missionId;
  int32_t taskId;
  TaskCommandStatus::type status;

  _MmtService_sendTaskStatusReport_args__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_taskId(const int32_t val);

  void __set_status(const TaskCommandStatus::type val);

  bool operator == (const MmtService_sendTaskStatusReport_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendTaskStatusReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendTaskStatusReport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendTaskStatusReport_args& obj);
};


class MmtService_sendTaskStatusReport_pargs {
 public:

  static const char* ascii_fingerprint; // = "3C6B5910B2C7A8886AEC90D855401773";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6B,0x59,0x10,0xB2,0xC7,0xA8,0x88,0x6A,0xEC,0x90,0xD8,0x55,0x40,0x17,0x73};


  virtual ~MmtService_sendTaskStatusReport_pargs() throw();
  const int32_t* missionId;
  const int32_t* taskId;
  const TaskCommandStatus::type* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendTaskStatusReport_pargs& obj);
};

typedef struct _MmtService_sendCommandStatusReport_args__isset {
  _MmtService_sendCommandStatusReport_args__isset() : missionId(false), commandId(false), status(false) {}
  bool missionId :1;
  bool commandId :1;
  bool status :1;
} _MmtService_sendCommandStatusReport_args__isset;

class MmtService_sendCommandStatusReport_args {
 public:

  static const char* ascii_fingerprint; // = "3C6B5910B2C7A8886AEC90D855401773";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6B,0x59,0x10,0xB2,0xC7,0xA8,0x88,0x6A,0xEC,0x90,0xD8,0x55,0x40,0x17,0x73};

  MmtService_sendCommandStatusReport_args(const MmtService_sendCommandStatusReport_args&);
  MmtService_sendCommandStatusReport_args& operator=(const MmtService_sendCommandStatusReport_args&);
  MmtService_sendCommandStatusReport_args() : missionId(0), commandId(0), status((TaskCommandStatus::type)0) {
  }

  virtual ~MmtService_sendCommandStatusReport_args() throw();
  int32_t missionId;
  int32_t commandId;
  TaskCommandStatus::type status;

  _MmtService_sendCommandStatusReport_args__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_commandId(const int32_t val);

  void __set_status(const TaskCommandStatus::type val);

  bool operator == (const MmtService_sendCommandStatusReport_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (!(commandId == rhs.commandId))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendCommandStatusReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendCommandStatusReport_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendCommandStatusReport_args& obj);
};


class MmtService_sendCommandStatusReport_pargs {
 public:

  static const char* ascii_fingerprint; // = "3C6B5910B2C7A8886AEC90D855401773";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x6B,0x59,0x10,0xB2,0xC7,0xA8,0x88,0x6A,0xEC,0x90,0xD8,0x55,0x40,0x17,0x73};


  virtual ~MmtService_sendCommandStatusReport_pargs() throw();
  const int32_t* missionId;
  const int32_t* commandId;
  const TaskCommandStatus::type* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendCommandStatusReport_pargs& obj);
};

typedef struct _MmtService_sendAlarm_args__isset {
  _MmtService_sendAlarm_args__isset() : missionId(false), alarm(false) {}
  bool missionId :1;
  bool alarm :1;
} _MmtService_sendAlarm_args__isset;

class MmtService_sendAlarm_args {
 public:

  static const char* ascii_fingerprint; // = "B016E8EF167B5C52DEC16CD08B975D81";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x16,0xE8,0xEF,0x16,0x7B,0x5C,0x52,0xDE,0xC1,0x6C,0xD0,0x8B,0x97,0x5D,0x81};

  MmtService_sendAlarm_args(const MmtService_sendAlarm_args&);
  MmtService_sendAlarm_args& operator=(const MmtService_sendAlarm_args&);
  MmtService_sendAlarm_args() : missionId(0) {
  }

  virtual ~MmtService_sendAlarm_args() throw();
  int32_t missionId;
  Alarm alarm;

  _MmtService_sendAlarm_args__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_alarm(const Alarm& val);

  bool operator == (const MmtService_sendAlarm_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (!(alarm == rhs.alarm))
      return false;
    return true;
  }
  bool operator != (const MmtService_sendAlarm_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_sendAlarm_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendAlarm_args& obj);
};


class MmtService_sendAlarm_pargs {
 public:

  static const char* ascii_fingerprint; // = "B016E8EF167B5C52DEC16CD08B975D81";
  static const uint8_t binary_fingerprint[16]; // = {0xB0,0x16,0xE8,0xEF,0x16,0x7B,0x5C,0x52,0xDE,0xC1,0x6C,0xD0,0x8B,0x97,0x5D,0x81};


  virtual ~MmtService_sendAlarm_pargs() throw();
  const int32_t* missionId;
  const Alarm* alarm;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_sendAlarm_pargs& obj);
};


class MmtService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MmtService_ping_args(const MmtService_ping_args&);
  MmtService_ping_args& operator=(const MmtService_ping_args&);
  MmtService_ping_args() {
  }

  virtual ~MmtService_ping_args() throw();

  bool operator == (const MmtService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MmtService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_ping_args& obj);
};


class MmtService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MmtService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_ping_pargs& obj);
};

typedef struct _MmtService_ping_result__isset {
  _MmtService_ping_result__isset() : success(false) {}
  bool success :1;
} _MmtService_ping_result__isset;

class MmtService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MmtService_ping_result(const MmtService_ping_result&);
  MmtService_ping_result& operator=(const MmtService_ping_result&);
  MmtService_ping_result() : success() {
  }

  virtual ~MmtService_ping_result() throw();
  std::string success;

  _MmtService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MmtService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MmtService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MmtService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MmtService_ping_result& obj);
};

typedef struct _MmtService_ping_presult__isset {
  _MmtService_ping_presult__isset() : success(false) {}
  bool success :1;
} _MmtService_ping_presult__isset;

class MmtService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MmtService_ping_presult() throw();
  std::string* success;

  _MmtService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MmtService_ping_presult& obj);
};

class MmtServiceClient : virtual public MmtServiceIf {
 public:
  MmtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MmtServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void stateVectorUpdate(const int32_t requestId, const StateVector& stateVector);
  void send_stateVectorUpdate(const int32_t requestId, const StateVector& stateVector);
  void sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData);
  void send_sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData);
  void sendPlan(const int32_t requestId, const Mission& plan);
  void send_sendPlan(const int32_t requestId, const Mission& plan);
  void sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId);
  void send_sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId);
  void sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status);
  void send_sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status);
  void sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status);
  void send_sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status);
  void sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status);
  void send_sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status);
  void sendAlarm(const int32_t missionId, const Alarm& alarm);
  void send_sendAlarm(const int32_t missionId, const Alarm& alarm);
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MmtServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MmtServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MmtServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_stateVectorUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sensorDataUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMissionStatusReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendTaskStatusReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCommandStatusReport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendAlarm(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MmtServiceProcessor(boost::shared_ptr<MmtServiceIf> iface) :
    iface_(iface) {
    processMap_["stateVectorUpdate"] = &MmtServiceProcessor::process_stateVectorUpdate;
    processMap_["sensorDataUpdate"] = &MmtServiceProcessor::process_sensorDataUpdate;
    processMap_["sendPlan"] = &MmtServiceProcessor::process_sendPlan;
    processMap_["sendError"] = &MmtServiceProcessor::process_sendError;
    processMap_["sendMissionStatusReport"] = &MmtServiceProcessor::process_sendMissionStatusReport;
    processMap_["sendTaskStatusReport"] = &MmtServiceProcessor::process_sendTaskStatusReport;
    processMap_["sendCommandStatusReport"] = &MmtServiceProcessor::process_sendCommandStatusReport;
    processMap_["sendAlarm"] = &MmtServiceProcessor::process_sendAlarm;
    processMap_["ping"] = &MmtServiceProcessor::process_ping;
  }

  virtual ~MmtServiceProcessor() {}
};

class MmtServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MmtServiceProcessorFactory(const ::boost::shared_ptr< MmtServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MmtServiceIfFactory > handlerFactory_;
};

class MmtServiceMultiface : virtual public MmtServiceIf {
 public:
  MmtServiceMultiface(std::vector<boost::shared_ptr<MmtServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MmtServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MmtServiceIf> > ifaces_;
  MmtServiceMultiface() {}
  void add(boost::shared_ptr<MmtServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void stateVectorUpdate(const int32_t requestId, const StateVector& stateVector) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stateVectorUpdate(requestId, stateVector);
    }
    ifaces_[i]->stateVectorUpdate(requestId, stateVector);
  }

  void sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sensorDataUpdate(requestId, sensorData);
    }
    ifaces_[i]->sensorDataUpdate(requestId, sensorData);
  }

  void sendPlan(const int32_t requestId, const Mission& plan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPlan(requestId, plan);
    }
    ifaces_[i]->sendPlan(requestId, plan);
  }

  void sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendError(errorId, errorMessage, requestId);
    }
    ifaces_[i]->sendError(errorId, errorMessage, requestId);
  }

  void sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMissionStatusReport(missionId, status);
    }
    ifaces_[i]->sendMissionStatusReport(missionId, status);
  }

  void sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendTaskStatusReport(missionId, taskId, status);
    }
    ifaces_[i]->sendTaskStatusReport(missionId, taskId, status);
  }

  void sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCommandStatusReport(missionId, commandId, status);
    }
    ifaces_[i]->sendCommandStatusReport(missionId, commandId, status);
  }

  void sendAlarm(const int32_t missionId, const Alarm& alarm) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendAlarm(missionId, alarm);
    }
    ifaces_[i]->sendAlarm(missionId, alarm);
  }

  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};

} // namespace

#endif
