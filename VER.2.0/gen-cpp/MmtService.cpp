/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MmtService.h"

namespace afarcloud {


MmtService_stateVectorUpdate_args::~MmtService_stateVectorUpdate_args() throw() {
}


uint32_t MmtService_stateVectorUpdate_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stateVector.read(iprot);
          this->__isset.stateVector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_stateVectorUpdate_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_stateVectorUpdate_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stateVector", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->stateVector.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_stateVectorUpdate_pargs::~MmtService_stateVectorUpdate_pargs() throw() {
}


uint32_t MmtService_stateVectorUpdate_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_stateVectorUpdate_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stateVector", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->stateVector)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sensorDataUpdate_args::~MmtService_sensorDataUpdate_args() throw() {
}


uint32_t MmtService_sensorDataUpdate_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sensorData.clear();
            uint32_t _size157;
            ::apache::thrift::protocol::TType _etype160;
            xfer += iprot->readListBegin(_etype160, _size157);
            this->sensorData.resize(_size157);
            uint32_t _i161;
            for (_i161 = 0; _i161 < _size157; ++_i161)
            {
              xfer += this->sensorData[_i161].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sensorData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sensorDataUpdate_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sensorDataUpdate_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorData", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sensorData.size()));
    std::vector<SensorData> ::const_iterator _iter162;
    for (_iter162 = this->sensorData.begin(); _iter162 != this->sensorData.end(); ++_iter162)
    {
      xfer += (*_iter162).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sensorDataUpdate_pargs::~MmtService_sensorDataUpdate_pargs() throw() {
}


uint32_t MmtService_sensorDataUpdate_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sensorDataUpdate_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorData", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->sensorData)).size()));
    std::vector<SensorData> ::const_iterator _iter163;
    for (_iter163 = (*(this->sensorData)).begin(); _iter163 != (*(this->sensorData)).end(); ++_iter163)
    {
      xfer += (*_iter163).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendPlan_args::~MmtService_sendPlan_args() throw() {
}


uint32_t MmtService_sendPlan_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan.read(iprot);
          this->__isset.plan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendPlan_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendPlan_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->plan.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendPlan_pargs::~MmtService_sendPlan_pargs() throw() {
}


uint32_t MmtService_sendPlan_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendPlan_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->plan)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendError_args::~MmtService_sendError_args() throw() {
}


uint32_t MmtService_sendError_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorId);
          this->__isset.errorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendError_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendError_args");

  xfer += oprot->writeFieldBegin("errorId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendError_pargs::~MmtService_sendError_pargs() throw() {
}


uint32_t MmtService_sendError_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendError_pargs");

  xfer += oprot->writeFieldBegin("errorId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->errorId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->errorMessage)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendMissionStatusReport_args::~MmtService_sendMissionStatusReport_args() throw() {
}


uint32_t MmtService_sendMissionStatusReport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast164;
          xfer += iprot->readI32(ecast164);
          this->status = (TaskCommandStatus::type)ecast164;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendMissionStatusReport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendMissionStatusReport_args");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendMissionStatusReport_pargs::~MmtService_sendMissionStatusReport_pargs() throw() {
}


uint32_t MmtService_sendMissionStatusReport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendMissionStatusReport_pargs");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->missionId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)(*(this->status)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendTaskStatusReport_args::~MmtService_sendTaskStatusReport_args() throw() {
}


uint32_t MmtService_sendTaskStatusReport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->taskId);
          this->__isset.taskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast165;
          xfer += iprot->readI32(ecast165);
          this->status = (TaskCommandStatus::type)ecast165;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendTaskStatusReport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendTaskStatusReport_args");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->taskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendTaskStatusReport_pargs::~MmtService_sendTaskStatusReport_pargs() throw() {
}


uint32_t MmtService_sendTaskStatusReport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendTaskStatusReport_pargs");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->missionId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->taskId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)(*(this->status)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendCommandStatusReport_args::~MmtService_sendCommandStatusReport_args() throw() {
}


uint32_t MmtService_sendCommandStatusReport_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->commandId);
          this->__isset.commandId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast166;
          xfer += iprot->readI32(ecast166);
          this->status = (TaskCommandStatus::type)ecast166;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendCommandStatusReport_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendCommandStatusReport_args");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->commandId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendCommandStatusReport_pargs::~MmtService_sendCommandStatusReport_pargs() throw() {
}


uint32_t MmtService_sendCommandStatusReport_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendCommandStatusReport_pargs");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->missionId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->commandId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)(*(this->status)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendAlarm_args::~MmtService_sendAlarm_args() throw() {
}


uint32_t MmtService_sendAlarm_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alarm.read(iprot);
          this->__isset.alarm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_sendAlarm_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendAlarm_args");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarm", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->alarm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_sendAlarm_pargs::~MmtService_sendAlarm_pargs() throw() {
}


uint32_t MmtService_sendAlarm_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_sendAlarm_pargs");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->missionId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarm", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->alarm)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_ping_args::~MmtService_ping_args() throw() {
}


uint32_t MmtService_ping_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_ping_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_ping_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_ping_pargs::~MmtService_ping_pargs() throw() {
}


uint32_t MmtService_ping_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MmtService_ping_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


MmtService_ping_result::~MmtService_ping_result() throw() {
}


uint32_t MmtService_ping_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MmtService_ping_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MmtService_ping_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


MmtService_ping_presult::~MmtService_ping_presult() throw() {
}


uint32_t MmtService_ping_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void MmtServiceClient::stateVectorUpdate(const int32_t requestId, const StateVector& stateVector)
{
  send_stateVectorUpdate(requestId, stateVector);
}

void MmtServiceClient::send_stateVectorUpdate(const int32_t requestId, const StateVector& stateVector)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("stateVectorUpdate", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_stateVectorUpdate_pargs args;
  args.requestId = &requestId;
  args.stateVector = &stateVector;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData)
{
  send_sensorDataUpdate(requestId, sensorData);
}

void MmtServiceClient::send_sensorDataUpdate(const int32_t requestId, const std::vector<SensorData> & sensorData)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sensorDataUpdate", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sensorDataUpdate_pargs args;
  args.requestId = &requestId;
  args.sensorData = &sensorData;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendPlan(const int32_t requestId, const Mission& plan)
{
  send_sendPlan(requestId, plan);
}

void MmtServiceClient::send_sendPlan(const int32_t requestId, const Mission& plan)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendPlan", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendPlan_pargs args;
  args.requestId = &requestId;
  args.plan = &plan;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId)
{
  send_sendError(errorId, errorMessage, requestId);
}

void MmtServiceClient::send_sendError(const int32_t errorId, const std::string& errorMessage, const int32_t requestId)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendError", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendError_pargs args;
  args.errorId = &errorId;
  args.errorMessage = &errorMessage;
  args.requestId = &requestId;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status)
{
  send_sendMissionStatusReport(missionId, status);
}

void MmtServiceClient::send_sendMissionStatusReport(const int32_t missionId, const TaskCommandStatus::type status)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendMissionStatusReport", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendMissionStatusReport_pargs args;
  args.missionId = &missionId;
  args.status = &status;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status)
{
  send_sendTaskStatusReport(missionId, taskId, status);
}

void MmtServiceClient::send_sendTaskStatusReport(const int32_t missionId, const int32_t taskId, const TaskCommandStatus::type status)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendTaskStatusReport", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendTaskStatusReport_pargs args;
  args.missionId = &missionId;
  args.taskId = &taskId;
  args.status = &status;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status)
{
  send_sendCommandStatusReport(missionId, commandId, status);
}

void MmtServiceClient::send_sendCommandStatusReport(const int32_t missionId, const int32_t commandId, const TaskCommandStatus::type status)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendCommandStatusReport", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendCommandStatusReport_pargs args;
  args.missionId = &missionId;
  args.commandId = &commandId;
  args.status = &status;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::sendAlarm(const int32_t missionId, const Alarm& alarm)
{
  send_sendAlarm(missionId, alarm);
}

void MmtServiceClient::send_sendAlarm(const int32_t missionId, const Alarm& alarm)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sendAlarm", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  MmtService_sendAlarm_pargs args;
  args.missionId = &missionId;
  args.alarm = &alarm;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::ping(std::string& _return)
{
  send_ping();
  recv_ping(_return);
}

void MmtServiceClient::send_ping()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ping", ::apache::thrift::protocol::T_CALL, cseqid);

  MmtService_ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void MmtServiceClient::recv_ping(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ping") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  MmtService_ping_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ping failed: unknown result");
}

bool MmtServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void MmtServiceProcessor::process_stateVectorUpdate(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.stateVectorUpdate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.stateVectorUpdate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.stateVectorUpdate");
  }

  MmtService_stateVectorUpdate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.stateVectorUpdate", bytes);
  }

  try {
    iface_->stateVectorUpdate(args.requestId, args.stateVector);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.stateVectorUpdate");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.stateVectorUpdate");
  }

  return;
}

void MmtServiceProcessor::process_sensorDataUpdate(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sensorDataUpdate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sensorDataUpdate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sensorDataUpdate");
  }

  MmtService_sensorDataUpdate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sensorDataUpdate", bytes);
  }

  try {
    iface_->sensorDataUpdate(args.requestId, args.sensorData);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sensorDataUpdate");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sensorDataUpdate");
  }

  return;
}

void MmtServiceProcessor::process_sendPlan(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendPlan", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendPlan");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendPlan");
  }

  MmtService_sendPlan_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendPlan", bytes);
  }

  try {
    iface_->sendPlan(args.requestId, args.plan);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendPlan");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendPlan");
  }

  return;
}

void MmtServiceProcessor::process_sendError(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendError", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendError");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendError");
  }

  MmtService_sendError_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendError", bytes);
  }

  try {
    iface_->sendError(args.errorId, args.errorMessage, args.requestId);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendError");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendError");
  }

  return;
}

void MmtServiceProcessor::process_sendMissionStatusReport(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendMissionStatusReport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendMissionStatusReport");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendMissionStatusReport");
  }

  MmtService_sendMissionStatusReport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendMissionStatusReport", bytes);
  }

  try {
    iface_->sendMissionStatusReport(args.missionId, args.status);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendMissionStatusReport");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendMissionStatusReport");
  }

  return;
}

void MmtServiceProcessor::process_sendTaskStatusReport(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendTaskStatusReport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendTaskStatusReport");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendTaskStatusReport");
  }

  MmtService_sendTaskStatusReport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendTaskStatusReport", bytes);
  }

  try {
    iface_->sendTaskStatusReport(args.missionId, args.taskId, args.status);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendTaskStatusReport");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendTaskStatusReport");
  }

  return;
}

void MmtServiceProcessor::process_sendCommandStatusReport(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendCommandStatusReport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendCommandStatusReport");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendCommandStatusReport");
  }

  MmtService_sendCommandStatusReport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendCommandStatusReport", bytes);
  }

  try {
    iface_->sendCommandStatusReport(args.missionId, args.commandId, args.status);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendCommandStatusReport");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendCommandStatusReport");
  }

  return;
}

void MmtServiceProcessor::process_sendAlarm(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.sendAlarm", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.sendAlarm");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.sendAlarm");
  }

  MmtService_sendAlarm_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.sendAlarm", bytes);
  }

  try {
    iface_->sendAlarm(args.missionId, args.alarm);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.sendAlarm");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "MmtService.sendAlarm");
  }

  return;
}

void MmtServiceProcessor::process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("MmtService.ping", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "MmtService.ping");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "MmtService.ping");
  }

  MmtService_ping_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "MmtService.ping", bytes);
  }

  MmtService_ping_result result;
  try {
    iface_->ping(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "MmtService.ping");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "MmtService.ping");
  }

  oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "MmtService.ping", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > MmtServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< MmtServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< MmtServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new MmtServiceProcessor(handler));
  return processor;
}
} // namespace

