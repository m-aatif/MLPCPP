/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AFC_TYPES_H
#define AFC_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace afarcloud {

struct VehicleType {
  enum type {
    AUAV = 0,
    RUAV = 1,
    AGV = 2,
    RGV = 3,
    UAV = 4,
    UGV = 5,
    Tractor = 6
  };
};

extern const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES;

struct TaskType {
  enum type {
    TRANSIT = 0,
    SURVEY = 1,
    INSPECT = 2,
    HOTPOINT = 3,
    FOLLOW_TARGET = 4,
    ACTIVE_TRACK = 5,
    PANORAMA = 6
  };
};

extern const std::map<int, const char*> _TaskType_VALUES_TO_NAMES;

struct CommandType {
  enum type {
    NAV_TAKEOFF = 1,
    NAV_LAND = 2,
    NAV_WAYPOINT = 3,
    CAMERA_IMAGE = 4,
    VIDEO_START_CAPTURE = 5,
    VIDEO_STOP_CAPTURE = 6,
    NAV_HOTPOINT = 7,
    NAV_FOLLOW_TARGET = 8,
    NAV_TRACK_SUBJECT = 9,
    CAMERA_PANORAMA = 10,
    NAV_HOME = 11
  };
};

extern const std::map<int, const char*> _CommandType_VALUES_TO_NAMES;

struct TaskCommandStatus {
  enum type {
    NotAssigned = 0,
    NotStarted = 1,
    Running = 2,
    Finished = 3,
    Stopped = 4
  };
};

extern const std::map<int, const char*> _TaskCommandStatus_VALUES_TO_NAMES;

struct TaskRegionType {
  enum type {
    Point = 0,
    Column = 1,
    Area = 2,
    Circle = 3,
    Dynamic = 4
  };
};

extern const std::map<int, const char*> _TaskRegionType_VALUES_TO_NAMES;

struct EquipmentType {
  enum type {
    CAMERA_360 = 0,
    CAMERA_PHOTO = 1,
    CAMERA_VIDEO = 2,
    CAMERA_TRACK = 3,
    CAMERA_PANORAMA = 4,
    CAMERA_FOLLOW = 5,
    CAMERA_HOTPOINT = 6,
    IR_CAMERA_PHOTO = 7,
    IR_CAMERA_VIDEO = 8,
    WIFI = 9,
    COLLISION_AVOIDANCE = 10,
    SPRAYER = 11
  };
};

extern const std::map<int, const char*> _EquipmentType_VALUES_TO_NAMES;

struct SensorType {
  enum type {
    HUMIDITY = 0,
    COLLAR = 1,
    PRESSURE = 2
  };
};

extern const std::map<int, const char*> _SensorType_VALUES_TO_NAMES;

class Position;

class Orientation;

class Region;

class DetectionRegion;

class Battery;

class StateVector;

class Equipment;

class Vehicle;

class TaskTemplate;

class Task;

class Command;

class MissionTag;

class Mission;

class Alarm;

class SensorData;

class PartField;

class TreatmentGrid;

typedef struct _Position__isset {
  _Position__isset() : longitude(false), latitude(false), altitude(false) {}
  bool longitude :1;
  bool latitude :1;
  bool altitude :1;
} _Position__isset;

class Position {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  Position(const Position&);
  Position& operator=(const Position&);
  Position() : longitude(0), latitude(0), altitude(0) {
  }

  virtual ~Position() throw();
  double longitude;
  double latitude;
  double altitude;

  _Position__isset __isset;

  void __set_longitude(const double val);

  void __set_latitude(const double val);

  void __set_altitude(const double val);

  bool operator == (const Position & rhs) const
  {
    if (!(longitude == rhs.longitude))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    return true;
  }
  bool operator != (const Position &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Position & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Position& obj);
};

void swap(Position &a, Position &b);

typedef struct _Orientation__isset {
  _Orientation__isset() : roll(false), pitch(false), yaw(false) {}
  bool roll :1;
  bool pitch :1;
  bool yaw :1;
} _Orientation__isset;

class Orientation {
 public:

  static const char* ascii_fingerprint; // = "EFFAD640FBA2CA56C50155B2A4545897";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

  Orientation(const Orientation&);
  Orientation& operator=(const Orientation&);
  Orientation() : roll(0), pitch(0), yaw(0) {
  }

  virtual ~Orientation() throw();
  double roll;
  double pitch;
  double yaw;

  _Orientation__isset __isset;

  void __set_roll(const double val);

  void __set_pitch(const double val);

  void __set_yaw(const double val);

  bool operator == (const Orientation & rhs) const
  {
    if (!(roll == rhs.roll))
      return false;
    if (!(pitch == rhs.pitch))
      return false;
    if (!(yaw == rhs.yaw))
      return false;
    return true;
  }
  bool operator != (const Orientation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Orientation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Orientation& obj);
};

void swap(Orientation &a, Orientation &b);

typedef struct _Region__isset {
  _Region__isset() : area(false) {}
  bool area :1;
} _Region__isset;

class Region {
 public:

  static const char* ascii_fingerprint; // = "CA3A04F6586943FB009547C6AECE5B89";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x3A,0x04,0xF6,0x58,0x69,0x43,0xFB,0x00,0x95,0x47,0xC6,0xAE,0xCE,0x5B,0x89};

  Region(const Region&);
  Region& operator=(const Region&);
  Region() {
  }

  virtual ~Region() throw();
  std::vector<Position>  area;

  _Region__isset __isset;

  void __set_area(const std::vector<Position> & val);

  bool operator == (const Region & rhs) const
  {
    if (!(area == rhs.area))
      return false;
    return true;
  }
  bool operator != (const Region &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Region & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Region& obj);
};

void swap(Region &a, Region &b);

typedef struct _DetectionRegion__isset {
  _DetectionRegion__isset() : Id(false), time(false), location(false), label(false) {}
  bool Id :1;
  bool time :1;
  bool location :1;
  bool label :1;
} _DetectionRegion__isset;

class DetectionRegion {
 public:

  static const char* ascii_fingerprint; // = "8BFD3256C426262EDB341D6CAA98AF2C";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xFD,0x32,0x56,0xC4,0x26,0x26,0x2E,0xDB,0x34,0x1D,0x6C,0xAA,0x98,0xAF,0x2C};

  DetectionRegion(const DetectionRegion&);
  DetectionRegion& operator=(const DetectionRegion&);
  DetectionRegion() : Id(0), time(0), label() {
  }

  virtual ~DetectionRegion() throw();
  int32_t Id;
  int64_t time;
  Region location;
  std::string label;

  _DetectionRegion__isset __isset;

  void __set_Id(const int32_t val);

  void __set_time(const int64_t val);

  void __set_location(const Region& val);

  void __set_label(const std::string& val);

  bool operator == (const DetectionRegion & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(label == rhs.label))
      return false;
    return true;
  }
  bool operator != (const DetectionRegion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DetectionRegion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DetectionRegion& obj);
};

void swap(DetectionRegion &a, DetectionRegion &b);

typedef struct _Battery__isset {
  _Battery__isset() : batteryCapacity(false), batteryPercentage(false) {}
  bool batteryCapacity :1;
  bool batteryPercentage :1;
} _Battery__isset;

class Battery {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Battery(const Battery&);
  Battery& operator=(const Battery&);
  Battery() : batteryCapacity(0), batteryPercentage(0) {
  }

  virtual ~Battery() throw();
  double batteryCapacity;
  double batteryPercentage;

  _Battery__isset __isset;

  void __set_batteryCapacity(const double val);

  void __set_batteryPercentage(const double val);

  bool operator == (const Battery & rhs) const
  {
    if (!(batteryCapacity == rhs.batteryCapacity))
      return false;
    if (!(batteryPercentage == rhs.batteryPercentage))
      return false;
    return true;
  }
  bool operator != (const Battery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Battery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Battery& obj);
};

void swap(Battery &a, Battery &b);

typedef struct _StateVector__isset {
  _StateVector__isset() : vehicleId(false), position(false), orientation(false), gimbalPitch(false), battery(false), linearSpeed(false), lastUpdate(false) {}
  bool vehicleId :1;
  bool position :1;
  bool orientation :1;
  bool gimbalPitch :1;
  bool battery :1;
  bool linearSpeed :1;
  bool lastUpdate :1;
} _StateVector__isset;

class StateVector {
 public:

  static const char* ascii_fingerprint; // = "F6F53304F1C21F736955393350523024";
  static const uint8_t binary_fingerprint[16]; // = {0xF6,0xF5,0x33,0x04,0xF1,0xC2,0x1F,0x73,0x69,0x55,0x39,0x33,0x50,0x52,0x30,0x24};

  StateVector(const StateVector&);
  StateVector& operator=(const StateVector&);
  StateVector() : vehicleId(0), gimbalPitch(0), linearSpeed(0), lastUpdate(0) {
  }

  virtual ~StateVector() throw();
  int32_t vehicleId;
  Position position;
  Orientation orientation;
  double gimbalPitch;
  Battery battery;
  double linearSpeed;
  int64_t lastUpdate;

  _StateVector__isset __isset;

  void __set_vehicleId(const int32_t val);

  void __set_position(const Position& val);

  void __set_orientation(const Orientation& val);

  void __set_gimbalPitch(const double val);

  void __set_battery(const Battery& val);

  void __set_linearSpeed(const double val);

  void __set_lastUpdate(const int64_t val);

  bool operator == (const StateVector & rhs) const
  {
    if (!(vehicleId == rhs.vehicleId))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(orientation == rhs.orientation))
      return false;
    if (__isset.gimbalPitch != rhs.__isset.gimbalPitch)
      return false;
    else if (__isset.gimbalPitch && !(gimbalPitch == rhs.gimbalPitch))
      return false;
    if (__isset.battery != rhs.__isset.battery)
      return false;
    else if (__isset.battery && !(battery == rhs.battery))
      return false;
    if (!(linearSpeed == rhs.linearSpeed))
      return false;
    if (!(lastUpdate == rhs.lastUpdate))
      return false;
    return true;
  }
  bool operator != (const StateVector &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateVector & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StateVector& obj);
};

void swap(StateVector &a, StateVector &b);

typedef struct _Equipment__isset {
  _Equipment__isset() : id(false), isoId(false), type(false), name(false) {}
  bool id :1;
  bool isoId :1;
  bool type :1;
  bool name :1;
} _Equipment__isset;

class Equipment {
 public:

  static const char* ascii_fingerprint; // = "09D2286AACC284EE3F781DC911176E22";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0xD2,0x28,0x6A,0xAC,0xC2,0x84,0xEE,0x3F,0x78,0x1D,0xC9,0x11,0x17,0x6E,0x22};

  Equipment(const Equipment&);
  Equipment& operator=(const Equipment&);
  Equipment() : id(0), isoId(), type((EquipmentType::type)0), name() {
  }

  virtual ~Equipment() throw();
  int32_t id;
  std::string isoId;
  EquipmentType::type type;
  std::string name;

  _Equipment__isset __isset;

  void __set_id(const int32_t val);

  void __set_isoId(const std::string& val);

  void __set_type(const EquipmentType::type val);

  void __set_name(const std::string& val);

  bool operator == (const Equipment & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.isoId != rhs.__isset.isoId)
      return false;
    else if (__isset.isoId && !(isoId == rhs.isoId))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Equipment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Equipment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Equipment& obj);
};

void swap(Equipment &a, Equipment &b);

typedef struct _Vehicle__isset {
  _Vehicle__isset() : id(false), name(false), type(false), maxSpeed(false), maxRunningTime(false), equipments(false), capabilities(false), stateVector(false), safetyDistance(false), isOnline(false) {}
  bool id :1;
  bool name :1;
  bool type :1;
  bool maxSpeed :1;
  bool maxRunningTime :1;
  bool equipments :1;
  bool capabilities :1;
  bool stateVector :1;
  bool safetyDistance :1;
  bool isOnline :1;
} _Vehicle__isset;

class Vehicle {
 public:

  static const char* ascii_fingerprint; // = "B4CE029BAA14A770F199021FE49FD056";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xCE,0x02,0x9B,0xAA,0x14,0xA7,0x70,0xF1,0x99,0x02,0x1F,0xE4,0x9F,0xD0,0x56};

  Vehicle(const Vehicle&);
  Vehicle& operator=(const Vehicle&);
  Vehicle() : id(0), name(), type((VehicleType::type)0), maxSpeed(0), maxRunningTime(0), safetyDistance(0), isOnline(0) {
  }

  virtual ~Vehicle() throw();
  int32_t id;
  std::string name;
  VehicleType::type type;
  double maxSpeed;
  int32_t maxRunningTime;
  std::vector<Equipment>  equipments;
  std::vector<TaskType::type>  capabilities;
  StateVector stateVector;
  double safetyDistance;
  bool isOnline;

  _Vehicle__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_type(const VehicleType::type val);

  void __set_maxSpeed(const double val);

  void __set_maxRunningTime(const int32_t val);

  void __set_equipments(const std::vector<Equipment> & val);

  void __set_capabilities(const std::vector<TaskType::type> & val);

  void __set_stateVector(const StateVector& val);

  void __set_safetyDistance(const double val);

  void __set_isOnline(const bool val);

  bool operator == (const Vehicle & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(maxSpeed == rhs.maxSpeed))
      return false;
    if (!(maxRunningTime == rhs.maxRunningTime))
      return false;
    if (!(equipments == rhs.equipments))
      return false;
    if (!(capabilities == rhs.capabilities))
      return false;
    if (!(stateVector == rhs.stateVector))
      return false;
    if (!(safetyDistance == rhs.safetyDistance))
      return false;
    if (!(isOnline == rhs.isOnline))
      return false;
    return true;
  }
  bool operator != (const Vehicle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vehicle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Vehicle& obj);
};

void swap(Vehicle &a, Vehicle &b);

typedef struct _TaskTemplate__isset {
  _TaskTemplate__isset() : taskType(false), description(false), regionType(false), requiredTypes(false), maxSpeed(false) {}
  bool taskType :1;
  bool description :1;
  bool regionType :1;
  bool requiredTypes :1;
  bool maxSpeed :1;
} _TaskTemplate__isset;

class TaskTemplate {
 public:

  static const char* ascii_fingerprint; // = "A4DB297FB0895E3E5A95CEA7C00C0886";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xDB,0x29,0x7F,0xB0,0x89,0x5E,0x3E,0x5A,0x95,0xCE,0xA7,0xC0,0x0C,0x08,0x86};

  TaskTemplate(const TaskTemplate&);
  TaskTemplate& operator=(const TaskTemplate&);
  TaskTemplate() : taskType((TaskType::type)0), description(), regionType((TaskRegionType::type)0), maxSpeed(0) {
  }

  virtual ~TaskTemplate() throw();
  TaskType::type taskType;
  std::string description;
  TaskRegionType::type regionType;
  std::vector<EquipmentType::type>  requiredTypes;
  double maxSpeed;

  _TaskTemplate__isset __isset;

  void __set_taskType(const TaskType::type val);

  void __set_description(const std::string& val);

  void __set_regionType(const TaskRegionType::type val);

  void __set_requiredTypes(const std::vector<EquipmentType::type> & val);

  void __set_maxSpeed(const double val);

  bool operator == (const TaskTemplate & rhs) const
  {
    if (!(taskType == rhs.taskType))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(regionType == rhs.regionType))
      return false;
    if (!(requiredTypes == rhs.requiredTypes))
      return false;
    if (__isset.maxSpeed != rhs.__isset.maxSpeed)
      return false;
    else if (__isset.maxSpeed && !(maxSpeed == rhs.maxSpeed))
      return false;
    return true;
  }
  bool operator != (const TaskTemplate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskTemplate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TaskTemplate& obj);
};

void swap(TaskTemplate &a, TaskTemplate &b);

typedef struct _Task__isset {
  _Task__isset() : taskTemplate(false), id(false), missionId(false), area(false), speed(false), altitude(false), range(false), timeLapse(false), bearing(false), startTime(false), endTime(false), taskStatus(false), assignedVehicleId(false), parentTaskId(false), partfields(false), treatmentGrids(false), repeatCount(false) {}
  bool taskTemplate :1;
  bool id :1;
  bool missionId :1;
  bool area :1;
  bool speed :1;
  bool altitude :1;
  bool range :1;
  bool timeLapse :1;
  bool bearing :1;
  bool startTime :1;
  bool endTime :1;
  bool taskStatus :1;
  bool assignedVehicleId :1;
  bool parentTaskId :1;
  bool partfields :1;
  bool treatmentGrids :1;
  bool repeatCount :1;
} _Task__isset;

class Task {
 public:

  static const char* ascii_fingerprint; // = "73EF016965F95AE68BA51B233859D353";
  static const uint8_t binary_fingerprint[16]; // = {0x73,0xEF,0x01,0x69,0x65,0xF9,0x5A,0xE6,0x8B,0xA5,0x1B,0x23,0x38,0x59,0xD3,0x53};

  Task(const Task&);
  Task& operator=(const Task&);
  Task() : id(0), missionId(0), speed(0), altitude(0), range(0), timeLapse(0), startTime(0), endTime(0), taskStatus((TaskCommandStatus::type)0), assignedVehicleId(0), parentTaskId(0), repeatCount(0) {
  }

  virtual ~Task() throw();
  TaskTemplate taskTemplate;
  int32_t id;
  int32_t missionId;
  Region area;
  double speed;
  double altitude;
  double range;
  int32_t timeLapse;
  Orientation bearing;
  int64_t startTime;
  int64_t endTime;
  TaskCommandStatus::type taskStatus;
  int32_t assignedVehicleId;
  int32_t parentTaskId;
  std::vector<PartField>  partfields;
  std::vector<TreatmentGrid>  treatmentGrids;
  int32_t repeatCount;

  _Task__isset __isset;

  void __set_taskTemplate(const TaskTemplate& val);

  void __set_id(const int32_t val);

  void __set_missionId(const int32_t val);

  void __set_area(const Region& val);

  void __set_speed(const double val);

  void __set_altitude(const double val);

  void __set_range(const double val);

  void __set_timeLapse(const int32_t val);

  void __set_bearing(const Orientation& val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_taskStatus(const TaskCommandStatus::type val);

  void __set_assignedVehicleId(const int32_t val);

  void __set_parentTaskId(const int32_t val);

  void __set_partfields(const std::vector<PartField> & val);

  void __set_treatmentGrids(const std::vector<TreatmentGrid> & val);

  void __set_repeatCount(const int32_t val);

  bool operator == (const Task & rhs) const
  {
    if (!(taskTemplate == rhs.taskTemplate))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(missionId == rhs.missionId))
      return false;
    if (!(area == rhs.area))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(altitude == rhs.altitude))
      return false;
    if (!(range == rhs.range))
      return false;
    if (!(timeLapse == rhs.timeLapse))
      return false;
    if (!(bearing == rhs.bearing))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(taskStatus == rhs.taskStatus))
      return false;
    if (!(assignedVehicleId == rhs.assignedVehicleId))
      return false;
    if (!(parentTaskId == rhs.parentTaskId))
      return false;
    if (__isset.partfields != rhs.__isset.partfields)
      return false;
    else if (__isset.partfields && !(partfields == rhs.partfields))
      return false;
    if (__isset.treatmentGrids != rhs.__isset.treatmentGrids)
      return false;
    else if (__isset.treatmentGrids && !(treatmentGrids == rhs.treatmentGrids))
      return false;
    if (!(repeatCount == rhs.repeatCount))
      return false;
    return true;
  }
  bool operator != (const Task &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Task & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Task& obj);
};

void swap(Task &a, Task &b);

typedef struct _Command__isset {
  _Command__isset() : relatedTask(false), id(false), commandType(false), startTime(false), endTime(false), commandStatus(false), params(false) {}
  bool relatedTask :1;
  bool id :1;
  bool commandType :1;
  bool startTime :1;
  bool endTime :1;
  bool commandStatus :1;
  bool params :1;
} _Command__isset;

class Command {
 public:

  static const char* ascii_fingerprint; // = "C7255F63BDFC6F84840BCDC4DCFD6611";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0x25,0x5F,0x63,0xBD,0xFC,0x6F,0x84,0x84,0x0B,0xCD,0xC4,0xDC,0xFD,0x66,0x11};

  Command(const Command&);
  Command& operator=(const Command&);
  Command() : id(0), commandType((CommandType::type)0), startTime(0), endTime(0), commandStatus((TaskCommandStatus::type)0) {
  }

  virtual ~Command() throw();
  Task relatedTask;
  int32_t id;
  CommandType::type commandType;
  int64_t startTime;
  int64_t endTime;
  TaskCommandStatus::type commandStatus;
  std::vector<double>  params;

  _Command__isset __isset;

  void __set_relatedTask(const Task& val);

  void __set_id(const int32_t val);

  void __set_commandType(const CommandType::type val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_commandStatus(const TaskCommandStatus::type val);

  void __set_params(const std::vector<double> & val);

  bool operator == (const Command & rhs) const
  {
    if (!(relatedTask == rhs.relatedTask))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(commandType == rhs.commandType))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(commandStatus == rhs.commandStatus))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const Command &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Command & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Command& obj);
};

void swap(Command &a, Command &b);

typedef struct _MissionTag__isset {
  _MissionTag__isset() : missionId(false), name(false) {}
  bool missionId :1;
  bool name :1;
} _MissionTag__isset;

class MissionTag {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  MissionTag(const MissionTag&);
  MissionTag& operator=(const MissionTag&);
  MissionTag() : missionId(0), name() {
  }

  virtual ~MissionTag() throw();
  int32_t missionId;
  std::string name;

  _MissionTag__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_name(const std::string& val);

  bool operator == (const MissionTag & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const MissionTag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionTag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionTag& obj);
};

void swap(MissionTag &a, MissionTag &b);

typedef struct _Mission__isset {
  _Mission__isset() : missionId(false), name(false), navigationArea(false), forbiddenArea(false), homeLocation(false), tasks(false), vehicles(false), commands(false) {}
  bool missionId :1;
  bool name :1;
  bool navigationArea :1;
  bool forbiddenArea :1;
  bool homeLocation :1;
  bool tasks :1;
  bool vehicles :1;
  bool commands :1;
} _Mission__isset;

class Mission {
 public:

  static const char* ascii_fingerprint; // = "F5AAF5ECD78EB0DBEC627E357CDCAA47";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0xAA,0xF5,0xEC,0xD7,0x8E,0xB0,0xDB,0xEC,0x62,0x7E,0x35,0x7C,0xDC,0xAA,0x47};

  Mission(const Mission&);
  Mission& operator=(const Mission&);
  Mission() : missionId(0), name() {
  }

  virtual ~Mission() throw();
  int32_t missionId;
  std::string name;
  Region navigationArea;
  std::vector<Region>  forbiddenArea;
  std::vector<Position>  homeLocation;
  std::vector<Task>  tasks;
  std::vector<Vehicle>  vehicles;
  std::vector<Command>  commands;

  _Mission__isset __isset;

  void __set_missionId(const int32_t val);

  void __set_name(const std::string& val);

  void __set_navigationArea(const Region& val);

  void __set_forbiddenArea(const std::vector<Region> & val);

  void __set_homeLocation(const std::vector<Position> & val);

  void __set_tasks(const std::vector<Task> & val);

  void __set_vehicles(const std::vector<Vehicle> & val);

  void __set_commands(const std::vector<Command> & val);

  bool operator == (const Mission & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (!(navigationArea == rhs.navigationArea))
      return false;
    if (!(forbiddenArea == rhs.forbiddenArea))
      return false;
    if (!(homeLocation == rhs.homeLocation))
      return false;
    if (!(tasks == rhs.tasks))
      return false;
    if (!(vehicles == rhs.vehicles))
      return false;
    if (__isset.commands != rhs.__isset.commands)
      return false;
    else if (__isset.commands && !(commands == rhs.commands))
      return false;
    return true;
  }
  bool operator != (const Mission &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mission & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Mission& obj);
};

void swap(Mission &a, Mission &b);

typedef struct _Alarm__isset {
  _Alarm__isset() : alarmId(false), vehicleId(false), missionId(false), alarmType(false), alarmCode(false), description(false), time(false) {}
  bool alarmId :1;
  bool vehicleId :1;
  bool missionId :1;
  bool alarmType :1;
  bool alarmCode :1;
  bool description :1;
  bool time :1;
} _Alarm__isset;

class Alarm {
 public:

  static const char* ascii_fingerprint; // = "073B9BBCFBD314AC8815F1B9106F4F3A";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x3B,0x9B,0xBC,0xFB,0xD3,0x14,0xAC,0x88,0x15,0xF1,0xB9,0x10,0x6F,0x4F,0x3A};

  Alarm(const Alarm&);
  Alarm& operator=(const Alarm&);
  Alarm() : alarmId(0), vehicleId(0), missionId(0), alarmType(0), alarmCode(0), description(), time(0) {
  }

  virtual ~Alarm() throw();
  int32_t alarmId;
  int32_t vehicleId;
  int32_t missionId;
  int32_t alarmType;
  int32_t alarmCode;
  std::string description;
  int64_t time;

  _Alarm__isset __isset;

  void __set_alarmId(const int32_t val);

  void __set_vehicleId(const int32_t val);

  void __set_missionId(const int32_t val);

  void __set_alarmType(const int32_t val);

  void __set_alarmCode(const int32_t val);

  void __set_description(const std::string& val);

  void __set_time(const int64_t val);

  bool operator == (const Alarm & rhs) const
  {
    if (!(alarmId == rhs.alarmId))
      return false;
    if (!(vehicleId == rhs.vehicleId))
      return false;
    if (!(missionId == rhs.missionId))
      return false;
    if (!(alarmType == rhs.alarmType))
      return false;
    if (!(alarmCode == rhs.alarmCode))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const Alarm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Alarm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Alarm& obj);
};

void swap(Alarm &a, Alarm &b);

typedef struct _SensorData__isset {
  _SensorData__isset() : sensorUid(false), sensorType(false), unit(false), value(false), sensorPosition(false) {}
  bool sensorUid :1;
  bool sensorType :1;
  bool unit :1;
  bool value :1;
  bool sensorPosition :1;
} _SensorData__isset;

class SensorData {
 public:

  static const char* ascii_fingerprint; // = "D921FC5DD86D7B7078A851BD70656EF5";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x21,0xFC,0x5D,0xD8,0x6D,0x7B,0x70,0x78,0xA8,0x51,0xBD,0x70,0x65,0x6E,0xF5};

  SensorData(const SensorData&);
  SensorData& operator=(const SensorData&);
  SensorData() : sensorUid(), sensorType((SensorType::type)0), unit(), value(0) {
  }

  virtual ~SensorData() throw();
  std::string sensorUid;
  SensorType::type sensorType;
  std::string unit;
  double value;
  Position sensorPosition;

  _SensorData__isset __isset;

  void __set_sensorUid(const std::string& val);

  void __set_sensorType(const SensorType::type val);

  void __set_unit(const std::string& val);

  void __set_value(const double val);

  void __set_sensorPosition(const Position& val);

  bool operator == (const SensorData & rhs) const
  {
    if (!(sensorUid == rhs.sensorUid))
      return false;
    if (!(sensorType == rhs.sensorType))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(sensorPosition == rhs.sensorPosition))
      return false;
    return true;
  }
  bool operator != (const SensorData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SensorData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SensorData& obj);
};

void swap(SensorData &a, SensorData &b);

typedef struct _PartField__isset {
  _PartField__isset() : partfieldId(false), isoId(false), name(false), borderPoints(false) {}
  bool partfieldId :1;
  bool isoId :1;
  bool name :1;
  bool borderPoints :1;
} _PartField__isset;

class PartField {
 public:

  static const char* ascii_fingerprint; // = "55CC88C0A3B754080197BC9D90E38562";
  static const uint8_t binary_fingerprint[16]; // = {0x55,0xCC,0x88,0xC0,0xA3,0xB7,0x54,0x08,0x01,0x97,0xBC,0x9D,0x90,0xE3,0x85,0x62};

  PartField(const PartField&);
  PartField& operator=(const PartField&);
  PartField() : partfieldId(0), isoId(), name() {
  }

  virtual ~PartField() throw();
  int32_t partfieldId;
  std::string isoId;
  std::string name;
  Region borderPoints;

  _PartField__isset __isset;

  void __set_partfieldId(const int32_t val);

  void __set_isoId(const std::string& val);

  void __set_name(const std::string& val);

  void __set_borderPoints(const Region& val);

  bool operator == (const PartField & rhs) const
  {
    if (!(partfieldId == rhs.partfieldId))
      return false;
    if (__isset.isoId != rhs.__isset.isoId)
      return false;
    else if (__isset.isoId && !(isoId == rhs.isoId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(borderPoints == rhs.borderPoints))
      return false;
    return true;
  }
  bool operator != (const PartField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PartField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PartField& obj);
};

void swap(PartField &a, PartField &b);

typedef struct _TreatmentGrid__isset {
  _TreatmentGrid__isset() : Id(false), partfieldId(false), taskId(false), numRows(false), numCols(false), treatmentValue(false) {}
  bool Id :1;
  bool partfieldId :1;
  bool taskId :1;
  bool numRows :1;
  bool numCols :1;
  bool treatmentValue :1;
} _TreatmentGrid__isset;

class TreatmentGrid {
 public:

  static const char* ascii_fingerprint; // = "1E95D76F45124BA6EA5DB65F42EEAC97";
  static const uint8_t binary_fingerprint[16]; // = {0x1E,0x95,0xD7,0x6F,0x45,0x12,0x4B,0xA6,0xEA,0x5D,0xB6,0x5F,0x42,0xEE,0xAC,0x97};

  TreatmentGrid(const TreatmentGrid&);
  TreatmentGrid& operator=(const TreatmentGrid&);
  TreatmentGrid() : Id(0), partfieldId(0), taskId(0), numRows(0), numCols(0) {
  }

  virtual ~TreatmentGrid() throw();
  int32_t Id;
  int32_t partfieldId;
  int32_t taskId;
  int32_t numRows;
  int32_t numCols;
  std::vector<double>  treatmentValue;

  _TreatmentGrid__isset __isset;

  void __set_Id(const int32_t val);

  void __set_partfieldId(const int32_t val);

  void __set_taskId(const int32_t val);

  void __set_numRows(const int32_t val);

  void __set_numCols(const int32_t val);

  void __set_treatmentValue(const std::vector<double> & val);

  bool operator == (const TreatmentGrid & rhs) const
  {
    if (!(Id == rhs.Id))
      return false;
    if (!(partfieldId == rhs.partfieldId))
      return false;
    if (!(taskId == rhs.taskId))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    if (!(numCols == rhs.numCols))
      return false;
    if (!(treatmentValue == rhs.treatmentValue))
      return false;
    return true;
  }
  bool operator != (const TreatmentGrid &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TreatmentGrid & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TreatmentGrid& obj);
};

void swap(TreatmentGrid &a, TreatmentGrid &b);

} // namespace

#endif
