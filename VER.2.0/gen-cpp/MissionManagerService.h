/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MissionManagerService_H
#define MissionManagerService_H

#include <thrift/TDispatchProcessor.h>
#include "AFC_types.h"

namespace afarcloud {

class MissionManagerServiceIf {
 public:
  virtual ~MissionManagerServiceIf() {}
  virtual void sendPlan(const int32_t requestId, const Mission& plan) = 0;
  virtual void abortMissionPlan(std::string& _return, const int32_t missionId) = 0;
  virtual void abortVehiclePlan(std::string& _return, const int32_t vehicleId) = 0;
  virtual void abortMissionPlanHard(std::string& _return, const int32_t missionId) = 0;
  virtual void abortVehiclePlanHard(std::string& _return, const int32_t vehicleId) = 0;
  virtual void ping(std::string& _return) = 0;
};

class MissionManagerServiceIfFactory {
 public:
  typedef MissionManagerServiceIf Handler;

  virtual ~MissionManagerServiceIfFactory() {}

  virtual MissionManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MissionManagerServiceIf* /* handler */) = 0;
};

class MissionManagerServiceIfSingletonFactory : virtual public MissionManagerServiceIfFactory {
 public:
  MissionManagerServiceIfSingletonFactory(const boost::shared_ptr<MissionManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~MissionManagerServiceIfSingletonFactory() {}

  virtual MissionManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MissionManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MissionManagerServiceIf> iface_;
};

class MissionManagerServiceNull : virtual public MissionManagerServiceIf {
 public:
  virtual ~MissionManagerServiceNull() {}
  void sendPlan(const int32_t /* requestId */, const Mission& /* plan */) {
    return;
  }
  void abortMissionPlan(std::string& /* _return */, const int32_t /* missionId */) {
    return;
  }
  void abortVehiclePlan(std::string& /* _return */, const int32_t /* vehicleId */) {
    return;
  }
  void abortMissionPlanHard(std::string& /* _return */, const int32_t /* missionId */) {
    return;
  }
  void abortVehiclePlanHard(std::string& /* _return */, const int32_t /* vehicleId */) {
    return;
  }
  void ping(std::string& /* _return */) {
    return;
  }
};

typedef struct _MissionManagerService_sendPlan_args__isset {
  _MissionManagerService_sendPlan_args__isset() : requestId(false), plan(false) {}
  bool requestId :1;
  bool plan :1;
} _MissionManagerService_sendPlan_args__isset;

class MissionManagerService_sendPlan_args {
 public:

  static const char* ascii_fingerprint; // = "E131073EF0D306D07674320C9CC809B7";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x31,0x07,0x3E,0xF0,0xD3,0x06,0xD0,0x76,0x74,0x32,0x0C,0x9C,0xC8,0x09,0xB7};

  MissionManagerService_sendPlan_args(const MissionManagerService_sendPlan_args&);
  MissionManagerService_sendPlan_args& operator=(const MissionManagerService_sendPlan_args&);
  MissionManagerService_sendPlan_args() : requestId(0) {
  }

  virtual ~MissionManagerService_sendPlan_args() throw();
  int32_t requestId;
  Mission plan;

  _MissionManagerService_sendPlan_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_plan(const Mission& val);

  bool operator == (const MissionManagerService_sendPlan_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(plan == rhs.plan))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_sendPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_sendPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_sendPlan_args& obj);
};


class MissionManagerService_sendPlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "E131073EF0D306D07674320C9CC809B7";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x31,0x07,0x3E,0xF0,0xD3,0x06,0xD0,0x76,0x74,0x32,0x0C,0x9C,0xC8,0x09,0xB7};


  virtual ~MissionManagerService_sendPlan_pargs() throw();
  const int32_t* requestId;
  const Mission* plan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_sendPlan_pargs& obj);
};

typedef struct _MissionManagerService_abortMissionPlan_args__isset {
  _MissionManagerService_abortMissionPlan_args__isset() : missionId(false) {}
  bool missionId :1;
} _MissionManagerService_abortMissionPlan_args__isset;

class MissionManagerService_abortMissionPlan_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MissionManagerService_abortMissionPlan_args(const MissionManagerService_abortMissionPlan_args&);
  MissionManagerService_abortMissionPlan_args& operator=(const MissionManagerService_abortMissionPlan_args&);
  MissionManagerService_abortMissionPlan_args() : missionId(0) {
  }

  virtual ~MissionManagerService_abortMissionPlan_args() throw();
  int32_t missionId;

  _MissionManagerService_abortMissionPlan_args__isset __isset;

  void __set_missionId(const int32_t val);

  bool operator == (const MissionManagerService_abortMissionPlan_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortMissionPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortMissionPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlan_args& obj);
};


class MissionManagerService_abortMissionPlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MissionManagerService_abortMissionPlan_pargs() throw();
  const int32_t* missionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlan_pargs& obj);
};

typedef struct _MissionManagerService_abortMissionPlan_result__isset {
  _MissionManagerService_abortMissionPlan_result__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortMissionPlan_result__isset;

class MissionManagerService_abortMissionPlan_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MissionManagerService_abortMissionPlan_result(const MissionManagerService_abortMissionPlan_result&);
  MissionManagerService_abortMissionPlan_result& operator=(const MissionManagerService_abortMissionPlan_result&);
  MissionManagerService_abortMissionPlan_result() : success() {
  }

  virtual ~MissionManagerService_abortMissionPlan_result() throw();
  std::string success;

  _MissionManagerService_abortMissionPlan_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MissionManagerService_abortMissionPlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortMissionPlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortMissionPlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlan_result& obj);
};

typedef struct _MissionManagerService_abortMissionPlan_presult__isset {
  _MissionManagerService_abortMissionPlan_presult__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortMissionPlan_presult__isset;

class MissionManagerService_abortMissionPlan_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MissionManagerService_abortMissionPlan_presult() throw();
  std::string* success;

  _MissionManagerService_abortMissionPlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlan_presult& obj);
};

typedef struct _MissionManagerService_abortVehiclePlan_args__isset {
  _MissionManagerService_abortVehiclePlan_args__isset() : vehicleId(false) {}
  bool vehicleId :1;
} _MissionManagerService_abortVehiclePlan_args__isset;

class MissionManagerService_abortVehiclePlan_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MissionManagerService_abortVehiclePlan_args(const MissionManagerService_abortVehiclePlan_args&);
  MissionManagerService_abortVehiclePlan_args& operator=(const MissionManagerService_abortVehiclePlan_args&);
  MissionManagerService_abortVehiclePlan_args() : vehicleId(0) {
  }

  virtual ~MissionManagerService_abortVehiclePlan_args() throw();
  int32_t vehicleId;

  _MissionManagerService_abortVehiclePlan_args__isset __isset;

  void __set_vehicleId(const int32_t val);

  bool operator == (const MissionManagerService_abortVehiclePlan_args & rhs) const
  {
    if (!(vehicleId == rhs.vehicleId))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortVehiclePlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortVehiclePlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlan_args& obj);
};


class MissionManagerService_abortVehiclePlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MissionManagerService_abortVehiclePlan_pargs() throw();
  const int32_t* vehicleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlan_pargs& obj);
};

typedef struct _MissionManagerService_abortVehiclePlan_result__isset {
  _MissionManagerService_abortVehiclePlan_result__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortVehiclePlan_result__isset;

class MissionManagerService_abortVehiclePlan_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MissionManagerService_abortVehiclePlan_result(const MissionManagerService_abortVehiclePlan_result&);
  MissionManagerService_abortVehiclePlan_result& operator=(const MissionManagerService_abortVehiclePlan_result&);
  MissionManagerService_abortVehiclePlan_result() : success() {
  }

  virtual ~MissionManagerService_abortVehiclePlan_result() throw();
  std::string success;

  _MissionManagerService_abortVehiclePlan_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MissionManagerService_abortVehiclePlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortVehiclePlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortVehiclePlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlan_result& obj);
};

typedef struct _MissionManagerService_abortVehiclePlan_presult__isset {
  _MissionManagerService_abortVehiclePlan_presult__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortVehiclePlan_presult__isset;

class MissionManagerService_abortVehiclePlan_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MissionManagerService_abortVehiclePlan_presult() throw();
  std::string* success;

  _MissionManagerService_abortVehiclePlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlan_presult& obj);
};

typedef struct _MissionManagerService_abortMissionPlanHard_args__isset {
  _MissionManagerService_abortMissionPlanHard_args__isset() : missionId(false) {}
  bool missionId :1;
} _MissionManagerService_abortMissionPlanHard_args__isset;

class MissionManagerService_abortMissionPlanHard_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MissionManagerService_abortMissionPlanHard_args(const MissionManagerService_abortMissionPlanHard_args&);
  MissionManagerService_abortMissionPlanHard_args& operator=(const MissionManagerService_abortMissionPlanHard_args&);
  MissionManagerService_abortMissionPlanHard_args() : missionId(0) {
  }

  virtual ~MissionManagerService_abortMissionPlanHard_args() throw();
  int32_t missionId;

  _MissionManagerService_abortMissionPlanHard_args__isset __isset;

  void __set_missionId(const int32_t val);

  bool operator == (const MissionManagerService_abortMissionPlanHard_args & rhs) const
  {
    if (!(missionId == rhs.missionId))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortMissionPlanHard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortMissionPlanHard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlanHard_args& obj);
};


class MissionManagerService_abortMissionPlanHard_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MissionManagerService_abortMissionPlanHard_pargs() throw();
  const int32_t* missionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlanHard_pargs& obj);
};

typedef struct _MissionManagerService_abortMissionPlanHard_result__isset {
  _MissionManagerService_abortMissionPlanHard_result__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortMissionPlanHard_result__isset;

class MissionManagerService_abortMissionPlanHard_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MissionManagerService_abortMissionPlanHard_result(const MissionManagerService_abortMissionPlanHard_result&);
  MissionManagerService_abortMissionPlanHard_result& operator=(const MissionManagerService_abortMissionPlanHard_result&);
  MissionManagerService_abortMissionPlanHard_result() : success() {
  }

  virtual ~MissionManagerService_abortMissionPlanHard_result() throw();
  std::string success;

  _MissionManagerService_abortMissionPlanHard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MissionManagerService_abortMissionPlanHard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortMissionPlanHard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortMissionPlanHard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlanHard_result& obj);
};

typedef struct _MissionManagerService_abortMissionPlanHard_presult__isset {
  _MissionManagerService_abortMissionPlanHard_presult__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortMissionPlanHard_presult__isset;

class MissionManagerService_abortMissionPlanHard_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MissionManagerService_abortMissionPlanHard_presult() throw();
  std::string* success;

  _MissionManagerService_abortMissionPlanHard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortMissionPlanHard_presult& obj);
};

typedef struct _MissionManagerService_abortVehiclePlanHard_args__isset {
  _MissionManagerService_abortVehiclePlanHard_args__isset() : vehicleId(false) {}
  bool vehicleId :1;
} _MissionManagerService_abortVehiclePlanHard_args__isset;

class MissionManagerService_abortVehiclePlanHard_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MissionManagerService_abortVehiclePlanHard_args(const MissionManagerService_abortVehiclePlanHard_args&);
  MissionManagerService_abortVehiclePlanHard_args& operator=(const MissionManagerService_abortVehiclePlanHard_args&);
  MissionManagerService_abortVehiclePlanHard_args() : vehicleId(0) {
  }

  virtual ~MissionManagerService_abortVehiclePlanHard_args() throw();
  int32_t vehicleId;

  _MissionManagerService_abortVehiclePlanHard_args__isset __isset;

  void __set_vehicleId(const int32_t val);

  bool operator == (const MissionManagerService_abortVehiclePlanHard_args & rhs) const
  {
    if (!(vehicleId == rhs.vehicleId))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortVehiclePlanHard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortVehiclePlanHard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlanHard_args& obj);
};


class MissionManagerService_abortVehiclePlanHard_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MissionManagerService_abortVehiclePlanHard_pargs() throw();
  const int32_t* vehicleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlanHard_pargs& obj);
};

typedef struct _MissionManagerService_abortVehiclePlanHard_result__isset {
  _MissionManagerService_abortVehiclePlanHard_result__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortVehiclePlanHard_result__isset;

class MissionManagerService_abortVehiclePlanHard_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MissionManagerService_abortVehiclePlanHard_result(const MissionManagerService_abortVehiclePlanHard_result&);
  MissionManagerService_abortVehiclePlanHard_result& operator=(const MissionManagerService_abortVehiclePlanHard_result&);
  MissionManagerService_abortVehiclePlanHard_result() : success() {
  }

  virtual ~MissionManagerService_abortVehiclePlanHard_result() throw();
  std::string success;

  _MissionManagerService_abortVehiclePlanHard_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MissionManagerService_abortVehiclePlanHard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_abortVehiclePlanHard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_abortVehiclePlanHard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlanHard_result& obj);
};

typedef struct _MissionManagerService_abortVehiclePlanHard_presult__isset {
  _MissionManagerService_abortVehiclePlanHard_presult__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_abortVehiclePlanHard_presult__isset;

class MissionManagerService_abortVehiclePlanHard_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MissionManagerService_abortVehiclePlanHard_presult() throw();
  std::string* success;

  _MissionManagerService_abortVehiclePlanHard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_abortVehiclePlanHard_presult& obj);
};


class MissionManagerService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MissionManagerService_ping_args(const MissionManagerService_ping_args&);
  MissionManagerService_ping_args& operator=(const MissionManagerService_ping_args&);
  MissionManagerService_ping_args() {
  }

  virtual ~MissionManagerService_ping_args() throw();

  bool operator == (const MissionManagerService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MissionManagerService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_ping_args& obj);
};


class MissionManagerService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MissionManagerService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_ping_pargs& obj);
};

typedef struct _MissionManagerService_ping_result__isset {
  _MissionManagerService_ping_result__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_ping_result__isset;

class MissionManagerService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  MissionManagerService_ping_result(const MissionManagerService_ping_result&);
  MissionManagerService_ping_result& operator=(const MissionManagerService_ping_result&);
  MissionManagerService_ping_result() : success() {
  }

  virtual ~MissionManagerService_ping_result() throw();
  std::string success;

  _MissionManagerService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MissionManagerService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MissionManagerService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MissionManagerService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_ping_result& obj);
};

typedef struct _MissionManagerService_ping_presult__isset {
  _MissionManagerService_ping_presult__isset() : success(false) {}
  bool success :1;
} _MissionManagerService_ping_presult__isset;

class MissionManagerService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~MissionManagerService_ping_presult() throw();
  std::string* success;

  _MissionManagerService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MissionManagerService_ping_presult& obj);
};

class MissionManagerServiceClient : virtual public MissionManagerServiceIf {
 public:
  MissionManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MissionManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendPlan(const int32_t requestId, const Mission& plan);
  void send_sendPlan(const int32_t requestId, const Mission& plan);
  void abortMissionPlan(std::string& _return, const int32_t missionId);
  void send_abortMissionPlan(const int32_t missionId);
  void recv_abortMissionPlan(std::string& _return);
  void abortVehiclePlan(std::string& _return, const int32_t vehicleId);
  void send_abortVehiclePlan(const int32_t vehicleId);
  void recv_abortVehiclePlan(std::string& _return);
  void abortMissionPlanHard(std::string& _return, const int32_t missionId);
  void send_abortMissionPlanHard(const int32_t missionId);
  void recv_abortMissionPlanHard(std::string& _return);
  void abortVehiclePlanHard(std::string& _return, const int32_t vehicleId);
  void send_abortVehiclePlanHard(const int32_t vehicleId);
  void recv_abortVehiclePlanHard(std::string& _return);
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MissionManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MissionManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MissionManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abortMissionPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abortVehiclePlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abortMissionPlanHard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_abortVehiclePlanHard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MissionManagerServiceProcessor(boost::shared_ptr<MissionManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["sendPlan"] = &MissionManagerServiceProcessor::process_sendPlan;
    processMap_["abortMissionPlan"] = &MissionManagerServiceProcessor::process_abortMissionPlan;
    processMap_["abortVehiclePlan"] = &MissionManagerServiceProcessor::process_abortVehiclePlan;
    processMap_["abortMissionPlanHard"] = &MissionManagerServiceProcessor::process_abortMissionPlanHard;
    processMap_["abortVehiclePlanHard"] = &MissionManagerServiceProcessor::process_abortVehiclePlanHard;
    processMap_["ping"] = &MissionManagerServiceProcessor::process_ping;
  }

  virtual ~MissionManagerServiceProcessor() {}
};

class MissionManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MissionManagerServiceProcessorFactory(const ::boost::shared_ptr< MissionManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MissionManagerServiceIfFactory > handlerFactory_;
};

class MissionManagerServiceMultiface : virtual public MissionManagerServiceIf {
 public:
  MissionManagerServiceMultiface(std::vector<boost::shared_ptr<MissionManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MissionManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MissionManagerServiceIf> > ifaces_;
  MissionManagerServiceMultiface() {}
  void add(boost::shared_ptr<MissionManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendPlan(const int32_t requestId, const Mission& plan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendPlan(requestId, plan);
    }
    ifaces_[i]->sendPlan(requestId, plan);
  }

  void abortMissionPlan(std::string& _return, const int32_t missionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->abortMissionPlan(_return, missionId);
    }
    ifaces_[i]->abortMissionPlan(_return, missionId);
    return;
  }

  void abortVehiclePlan(std::string& _return, const int32_t vehicleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->abortVehiclePlan(_return, vehicleId);
    }
    ifaces_[i]->abortVehiclePlan(_return, vehicleId);
    return;
  }

  void abortMissionPlanHard(std::string& _return, const int32_t missionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->abortMissionPlanHard(_return, missionId);
    }
    ifaces_[i]->abortMissionPlanHard(_return, missionId);
    return;
  }

  void abortVehiclePlanHard(std::string& _return, const int32_t vehicleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->abortVehiclePlanHard(_return, vehicleId);
    }
    ifaces_[i]->abortVehiclePlanHard(_return, vehicleId);
    return;
  }

  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};

} // namespace

#endif
