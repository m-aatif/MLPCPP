/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SemanticQueryService.h"

namespace afarcloud {


SemanticQueryService_getAllVehicles_args::~SemanticQueryService_getAllVehicles_args() throw() {
}


uint32_t SemanticQueryService_getAllVehicles_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getAllVehicles_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getAllVehicles_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getAllVehicles_pargs::~SemanticQueryService_getAllVehicles_pargs() throw() {
}


uint32_t SemanticQueryService_getAllVehicles_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getAllVehicles_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getAllVehicles_result::~SemanticQueryService_getAllVehicles_result() throw() {
}


uint32_t SemanticQueryService_getAllVehicles_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _etype125;
            xfer += iprot->readListBegin(_etype125, _size122);
            this->success.resize(_size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              xfer += this->success[_i126].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getAllVehicles_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SemanticQueryService_getAllVehicles_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<Vehicle> ::const_iterator _iter127;
      for (_iter127 = this->success.begin(); _iter127 != this->success.end(); ++_iter127)
      {
        xfer += (*_iter127).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SemanticQueryService_getAllVehicles_presult::~SemanticQueryService_getAllVehicles_presult() throw() {
}


uint32_t SemanticQueryService_getAllVehicles_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size128;
            ::apache::thrift::protocol::TType _etype131;
            xfer += iprot->readListBegin(_etype131, _size128);
            (*(this->success)).resize(_size128);
            uint32_t _i132;
            for (_i132 = 0; _i132 < _size128; ++_i132)
            {
              xfer += (*(this->success))[_i132].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SemanticQueryService_getAllMissions_args::~SemanticQueryService_getAllMissions_args() throw() {
}


uint32_t SemanticQueryService_getAllMissions_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getAllMissions_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getAllMissions_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getAllMissions_pargs::~SemanticQueryService_getAllMissions_pargs() throw() {
}


uint32_t SemanticQueryService_getAllMissions_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getAllMissions_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getAllMissions_result::~SemanticQueryService_getAllMissions_result() throw() {
}


uint32_t SemanticQueryService_getAllMissions_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->success.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += this->success[_i137].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getAllMissions_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SemanticQueryService_getAllMissions_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<MissionTag> ::const_iterator _iter138;
      for (_iter138 = this->success.begin(); _iter138 != this->success.end(); ++_iter138)
      {
        xfer += (*_iter138).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SemanticQueryService_getAllMissions_presult::~SemanticQueryService_getAllMissions_presult() throw() {
}


uint32_t SemanticQueryService_getAllMissions_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size139;
            ::apache::thrift::protocol::TType _etype142;
            xfer += iprot->readListBegin(_etype142, _size139);
            (*(this->success)).resize(_size139);
            uint32_t _i143;
            for (_i143 = 0; _i143 < _size139; ++_i143)
            {
              xfer += (*(this->success))[_i143].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SemanticQueryService_getOngoingMissions_args::~SemanticQueryService_getOngoingMissions_args() throw() {
}


uint32_t SemanticQueryService_getOngoingMissions_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getOngoingMissions_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getOngoingMissions_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getOngoingMissions_pargs::~SemanticQueryService_getOngoingMissions_pargs() throw() {
}


uint32_t SemanticQueryService_getOngoingMissions_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getOngoingMissions_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getOngoingMissions_result::~SemanticQueryService_getOngoingMissions_result() throw() {
}


uint32_t SemanticQueryService_getOngoingMissions_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size144;
            ::apache::thrift::protocol::TType _etype147;
            xfer += iprot->readListBegin(_etype147, _size144);
            this->success.resize(_size144);
            uint32_t _i148;
            for (_i148 = 0; _i148 < _size144; ++_i148)
            {
              xfer += this->success[_i148].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getOngoingMissions_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SemanticQueryService_getOngoingMissions_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<MissionTag> ::const_iterator _iter149;
      for (_iter149 = this->success.begin(); _iter149 != this->success.end(); ++_iter149)
      {
        xfer += (*_iter149).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SemanticQueryService_getOngoingMissions_presult::~SemanticQueryService_getOngoingMissions_presult() throw() {
}


uint32_t SemanticQueryService_getOngoingMissions_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size150;
            ::apache::thrift::protocol::TType _etype153;
            xfer += iprot->readListBegin(_etype153, _size150);
            (*(this->success)).resize(_size150);
            uint32_t _i154;
            for (_i154 = 0; _i154 < _size150; ++_i154)
            {
              xfer += (*(this->success))[_i154].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SemanticQueryService_getVehicle_args::~SemanticQueryService_getVehicle_args() throw() {
}


uint32_t SemanticQueryService_getVehicle_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vid);
          this->__isset.vid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getVehicle_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getVehicle_args");

  xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getVehicle_pargs::~SemanticQueryService_getVehicle_pargs() throw() {
}


uint32_t SemanticQueryService_getVehicle_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_getVehicle_pargs");

  xfer += oprot->writeFieldBegin("vid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->vid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_getVehicle_result::~SemanticQueryService_getVehicle_result() throw() {
}


uint32_t SemanticQueryService_getVehicle_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_getVehicle_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SemanticQueryService_getVehicle_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SemanticQueryService_getVehicle_presult::~SemanticQueryService_getVehicle_presult() throw() {
}


uint32_t SemanticQueryService_getVehicle_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SemanticQueryService_queryStateVector_args::~SemanticQueryService_queryStateVector_args() throw() {
}


uint32_t SemanticQueryService_queryStateVector_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_queryStateVector_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryStateVector_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_queryStateVector_pargs::~SemanticQueryService_queryStateVector_pargs() throw() {
}


uint32_t SemanticQueryService_queryStateVector_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryStateVector_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->vehicleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->startTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->endTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_querySensorData_args::~SemanticQueryService_querySensorData_args() throw() {
}


uint32_t SemanticQueryService_querySensorData_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->region.read(iprot);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast155;
          xfer += iprot->readI32(ecast155);
          this->sensorType = (SensorType::type)ecast155;
          this->__isset.sensorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_querySensorData_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_querySensorData_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->region.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->sensorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_querySensorData_pargs::~SemanticQueryService_querySensorData_pargs() throw() {
}


uint32_t SemanticQueryService_querySensorData_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_querySensorData_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->region)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->startTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->endTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)(*(this->sensorType)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_queryHistoricalStateVectors_args::~SemanticQueryService_queryHistoricalStateVectors_args() throw() {
}


uint32_t SemanticQueryService_queryHistoricalStateVectors_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_queryHistoricalStateVectors_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryHistoricalStateVectors_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_queryHistoricalStateVectors_pargs::~SemanticQueryService_queryHistoricalStateVectors_pargs() throw() {
}


uint32_t SemanticQueryService_queryHistoricalStateVectors_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryHistoricalStateVectors_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->vehicleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->startTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->endTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_queryHistoricalSensorData_args::~SemanticQueryService_queryHistoricalSensorData_args() throw() {
}


uint32_t SemanticQueryService_queryHistoricalSensorData_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->region.read(iprot);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast156;
          xfer += iprot->readI32(ecast156);
          this->sensorType = (SensorType::type)ecast156;
          this->__isset.sensorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_queryHistoricalSensorData_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryHistoricalSensorData_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->region.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->sensorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_queryHistoricalSensorData_pargs::~SemanticQueryService_queryHistoricalSensorData_pargs() throw() {
}


uint32_t SemanticQueryService_queryHistoricalSensorData_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_queryHistoricalSensorData_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->region)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->startTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->endTime)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)(*(this->sensorType)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_storeEvent_args::~SemanticQueryService_storeEvent_args() throw() {
}


uint32_t SemanticQueryService_storeEvent_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->requestId);
          this->__isset.requestId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->subtype);
          this->__isset.subtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timeReference);
          this->__isset.timeReference = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_storeEvent_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_storeEvent_args");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->requestId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subtype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->subtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeReference", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->timeReference);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_storeEvent_pargs::~SemanticQueryService_storeEvent_pargs() throw() {
}


uint32_t SemanticQueryService_storeEvent_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_storeEvent_pargs");

  xfer += oprot->writeFieldBegin("requestId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->requestId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->missionId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->vehicleId)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subtype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->subtype)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString((*(this->description)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeReference", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64((*(this->timeReference)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_ping_args::~SemanticQueryService_ping_args() throw() {
}


uint32_t SemanticQueryService_ping_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_ping_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_ping_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_ping_pargs::~SemanticQueryService_ping_pargs() throw() {
}


uint32_t SemanticQueryService_ping_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SemanticQueryService_ping_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SemanticQueryService_ping_result::~SemanticQueryService_ping_result() throw() {
}


uint32_t SemanticQueryService_ping_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SemanticQueryService_ping_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SemanticQueryService_ping_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SemanticQueryService_ping_presult::~SemanticQueryService_ping_presult() throw() {
}


uint32_t SemanticQueryService_ping_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

void SemanticQueryServiceClient::getAllVehicles(std::vector<Vehicle> & _return)
{
  send_getAllVehicles();
  recv_getAllVehicles(_return);
}

void SemanticQueryServiceClient::send_getAllVehicles()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllVehicles", ::apache::thrift::protocol::T_CALL, cseqid);

  SemanticQueryService_getAllVehicles_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::recv_getAllVehicles(std::vector<Vehicle> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAllVehicles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SemanticQueryService_getAllVehicles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllVehicles failed: unknown result");
}

void SemanticQueryServiceClient::getAllMissions(std::vector<MissionTag> & _return)
{
  send_getAllMissions();
  recv_getAllMissions(_return);
}

void SemanticQueryServiceClient::send_getAllMissions()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getAllMissions", ::apache::thrift::protocol::T_CALL, cseqid);

  SemanticQueryService_getAllMissions_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::recv_getAllMissions(std::vector<MissionTag> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getAllMissions") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SemanticQueryService_getAllMissions_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getAllMissions failed: unknown result");
}

void SemanticQueryServiceClient::getOngoingMissions(std::vector<MissionTag> & _return)
{
  send_getOngoingMissions();
  recv_getOngoingMissions(_return);
}

void SemanticQueryServiceClient::send_getOngoingMissions()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getOngoingMissions", ::apache::thrift::protocol::T_CALL, cseqid);

  SemanticQueryService_getOngoingMissions_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::recv_getOngoingMissions(std::vector<MissionTag> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getOngoingMissions") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SemanticQueryService_getOngoingMissions_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getOngoingMissions failed: unknown result");
}

void SemanticQueryServiceClient::getVehicle(Vehicle& _return, const int32_t vid)
{
  send_getVehicle(vid);
  recv_getVehicle(_return);
}

void SemanticQueryServiceClient::send_getVehicle(const int32_t vid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getVehicle", ::apache::thrift::protocol::T_CALL, cseqid);

  SemanticQueryService_getVehicle_pargs args;
  args.vid = &vid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::recv_getVehicle(Vehicle& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("getVehicle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SemanticQueryService_getVehicle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "getVehicle failed: unknown result");
}

void SemanticQueryServiceClient::queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime)
{
  send_queryStateVector(requestId, vehicleId, startTime, endTime);
}

void SemanticQueryServiceClient::send_queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("queryStateVector", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SemanticQueryService_queryStateVector_pargs args;
  args.requestId = &requestId;
  args.vehicleId = &vehicleId;
  args.startTime = &startTime;
  args.endTime = &endTime;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType)
{
  send_querySensorData(requestId, region, startTime, endTime, sensorType);
}

void SemanticQueryServiceClient::send_querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("querySensorData", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SemanticQueryService_querySensorData_pargs args;
  args.requestId = &requestId;
  args.region = &region;
  args.startTime = &startTime;
  args.endTime = &endTime;
  args.sensorType = &sensorType;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime)
{
  send_queryHistoricalStateVectors(requestId, vehicleId, startTime, endTime);
}

void SemanticQueryServiceClient::send_queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("queryHistoricalStateVectors", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SemanticQueryService_queryHistoricalStateVectors_pargs args;
  args.requestId = &requestId;
  args.vehicleId = &vehicleId;
  args.startTime = &startTime;
  args.endTime = &endTime;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType)
{
  send_queryHistoricalSensorData(requestId, region, startTime, endTime, sensorType);
}

void SemanticQueryServiceClient::send_queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("queryHistoricalSensorData", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SemanticQueryService_queryHistoricalSensorData_pargs args;
  args.requestId = &requestId;
  args.region = &region;
  args.startTime = &startTime;
  args.endTime = &endTime;
  args.sensorType = &sensorType;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference)
{
  send_storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
}

void SemanticQueryServiceClient::send_storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("storeEvent", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  SemanticQueryService_storeEvent_pargs args;
  args.requestId = &requestId;
  args.missionId = &missionId;
  args.vehicleId = &vehicleId;
  args.subtype = &subtype;
  args.description = &description;
  args.timeReference = &timeReference;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::ping(std::string& _return)
{
  send_ping();
  recv_ping(_return);
}

void SemanticQueryServiceClient::send_ping()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ping", ::apache::thrift::protocol::T_CALL, cseqid);

  SemanticQueryService_ping_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void SemanticQueryServiceClient::recv_ping(std::string& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ping") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SemanticQueryService_ping_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ping failed: unknown result");
}

bool SemanticQueryServiceProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void SemanticQueryServiceProcessor::process_getAllVehicles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.getAllVehicles", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.getAllVehicles");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.getAllVehicles");
  }

  SemanticQueryService_getAllVehicles_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.getAllVehicles", bytes);
  }

  SemanticQueryService_getAllVehicles_result result;
  try {
    iface_->getAllVehicles(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.getAllVehicles");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllVehicles", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SemanticQueryService.getAllVehicles");
  }

  oprot->writeMessageBegin("getAllVehicles", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SemanticQueryService.getAllVehicles", bytes);
  }
}

void SemanticQueryServiceProcessor::process_getAllMissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.getAllMissions", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.getAllMissions");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.getAllMissions");
  }

  SemanticQueryService_getAllMissions_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.getAllMissions", bytes);
  }

  SemanticQueryService_getAllMissions_result result;
  try {
    iface_->getAllMissions(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.getAllMissions");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getAllMissions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SemanticQueryService.getAllMissions");
  }

  oprot->writeMessageBegin("getAllMissions", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SemanticQueryService.getAllMissions", bytes);
  }
}

void SemanticQueryServiceProcessor::process_getOngoingMissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.getOngoingMissions", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.getOngoingMissions");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.getOngoingMissions");
  }

  SemanticQueryService_getOngoingMissions_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.getOngoingMissions", bytes);
  }

  SemanticQueryService_getOngoingMissions_result result;
  try {
    iface_->getOngoingMissions(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.getOngoingMissions");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getOngoingMissions", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SemanticQueryService.getOngoingMissions");
  }

  oprot->writeMessageBegin("getOngoingMissions", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SemanticQueryService.getOngoingMissions", bytes);
  }
}

void SemanticQueryServiceProcessor::process_getVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.getVehicle", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.getVehicle");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.getVehicle");
  }

  SemanticQueryService_getVehicle_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.getVehicle", bytes);
  }

  SemanticQueryService_getVehicle_result result;
  try {
    iface_->getVehicle(result.success, args.vid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.getVehicle");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getVehicle", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SemanticQueryService.getVehicle");
  }

  oprot->writeMessageBegin("getVehicle", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SemanticQueryService.getVehicle", bytes);
  }
}

void SemanticQueryServiceProcessor::process_queryStateVector(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.queryStateVector", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.queryStateVector");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.queryStateVector");
  }

  SemanticQueryService_queryStateVector_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.queryStateVector", bytes);
  }

  try {
    iface_->queryStateVector(args.requestId, args.vehicleId, args.startTime, args.endTime);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.queryStateVector");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SemanticQueryService.queryStateVector");
  }

  return;
}

void SemanticQueryServiceProcessor::process_querySensorData(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.querySensorData", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.querySensorData");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.querySensorData");
  }

  SemanticQueryService_querySensorData_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.querySensorData", bytes);
  }

  try {
    iface_->querySensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.querySensorData");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SemanticQueryService.querySensorData");
  }

  return;
}

void SemanticQueryServiceProcessor::process_queryHistoricalStateVectors(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.queryHistoricalStateVectors", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.queryHistoricalStateVectors");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.queryHistoricalStateVectors");
  }

  SemanticQueryService_queryHistoricalStateVectors_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.queryHistoricalStateVectors", bytes);
  }

  try {
    iface_->queryHistoricalStateVectors(args.requestId, args.vehicleId, args.startTime, args.endTime);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.queryHistoricalStateVectors");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SemanticQueryService.queryHistoricalStateVectors");
  }

  return;
}

void SemanticQueryServiceProcessor::process_queryHistoricalSensorData(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.queryHistoricalSensorData", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.queryHistoricalSensorData");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.queryHistoricalSensorData");
  }

  SemanticQueryService_queryHistoricalSensorData_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.queryHistoricalSensorData", bytes);
  }

  try {
    iface_->queryHistoricalSensorData(args.requestId, args.region, args.startTime, args.endTime, args.sensorType);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.queryHistoricalSensorData");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SemanticQueryService.queryHistoricalSensorData");
  }

  return;
}

void SemanticQueryServiceProcessor::process_storeEvent(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.storeEvent", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.storeEvent");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.storeEvent");
  }

  SemanticQueryService_storeEvent_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.storeEvent", bytes);
  }

  try {
    iface_->storeEvent(args.requestId, args.missionId, args.vehicleId, args.subtype, args.description, args.timeReference);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.storeEvent");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "SemanticQueryService.storeEvent");
  }

  return;
}

void SemanticQueryServiceProcessor::process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SemanticQueryService.ping", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SemanticQueryService.ping");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SemanticQueryService.ping");
  }

  SemanticQueryService_ping_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SemanticQueryService.ping", bytes);
  }

  SemanticQueryService_ping_result result;
  try {
    iface_->ping(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SemanticQueryService.ping");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SemanticQueryService.ping");
  }

  oprot->writeMessageBegin("ping", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SemanticQueryService.ping", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > SemanticQueryServiceProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< SemanticQueryServiceIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< SemanticQueryServiceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new SemanticQueryServiceProcessor(handler));
  return processor;
}
} // namespace

