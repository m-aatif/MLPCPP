/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SemanticQueryService_H
#define SemanticQueryService_H

#include <thrift/TDispatchProcessor.h>
#include "AFC_types.h"

namespace afarcloud {

class SemanticQueryServiceIf {
 public:
  virtual ~SemanticQueryServiceIf() {}
  virtual void getAllVehicles(std::vector<Vehicle> & _return) = 0;
  virtual void getAllMissions(std::vector<MissionTag> & _return) = 0;
  virtual void getOngoingMissions(std::vector<MissionTag> & _return) = 0;
  virtual void getVehicle(Vehicle& _return, const int32_t vid) = 0;
  virtual void queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) = 0;
  virtual void querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) = 0;
  virtual void queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) = 0;
  virtual void queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) = 0;
  virtual void storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference) = 0;
  virtual void ping(std::string& _return) = 0;
};

class SemanticQueryServiceIfFactory {
 public:
  typedef SemanticQueryServiceIf Handler;

  virtual ~SemanticQueryServiceIfFactory() {}

  virtual SemanticQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SemanticQueryServiceIf* /* handler */) = 0;
};

class SemanticQueryServiceIfSingletonFactory : virtual public SemanticQueryServiceIfFactory {
 public:
  SemanticQueryServiceIfSingletonFactory(const boost::shared_ptr<SemanticQueryServiceIf>& iface) : iface_(iface) {}
  virtual ~SemanticQueryServiceIfSingletonFactory() {}

  virtual SemanticQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SemanticQueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SemanticQueryServiceIf> iface_;
};

class SemanticQueryServiceNull : virtual public SemanticQueryServiceIf {
 public:
  virtual ~SemanticQueryServiceNull() {}
  void getAllVehicles(std::vector<Vehicle> & /* _return */) {
    return;
  }
  void getAllMissions(std::vector<MissionTag> & /* _return */) {
    return;
  }
  void getOngoingMissions(std::vector<MissionTag> & /* _return */) {
    return;
  }
  void getVehicle(Vehicle& /* _return */, const int32_t /* vid */) {
    return;
  }
  void queryStateVector(const int32_t /* requestId */, const int32_t /* vehicleId */, const int32_t /* startTime */, const int32_t /* endTime */) {
    return;
  }
  void querySensorData(const int32_t /* requestId */, const Region& /* region */, const int32_t /* startTime */, const int32_t /* endTime */, const SensorType::type /* sensorType */) {
    return;
  }
  void queryHistoricalStateVectors(const int32_t /* requestId */, const int32_t /* vehicleId */, const int32_t /* startTime */, const int32_t /* endTime */) {
    return;
  }
  void queryHistoricalSensorData(const int32_t /* requestId */, const Region& /* region */, const int32_t /* startTime */, const int32_t /* endTime */, const SensorType::type /* sensorType */) {
    return;
  }
  void storeEvent(const int32_t /* requestId */, const int32_t /* missionId */, const int32_t /* vehicleId */, const int32_t /* subtype */, const std::string& /* description */, const int64_t /* timeReference */) {
    return;
  }
  void ping(std::string& /* _return */) {
    return;
  }
};


class SemanticQueryService_getAllVehicles_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SemanticQueryService_getAllVehicles_args(const SemanticQueryService_getAllVehicles_args&);
  SemanticQueryService_getAllVehicles_args& operator=(const SemanticQueryService_getAllVehicles_args&);
  SemanticQueryService_getAllVehicles_args() {
  }

  virtual ~SemanticQueryService_getAllVehicles_args() throw();

  bool operator == (const SemanticQueryService_getAllVehicles_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SemanticQueryService_getAllVehicles_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getAllVehicles_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllVehicles_args& obj);
};


class SemanticQueryService_getAllVehicles_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SemanticQueryService_getAllVehicles_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllVehicles_pargs& obj);
};

typedef struct _SemanticQueryService_getAllVehicles_result__isset {
  _SemanticQueryService_getAllVehicles_result__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getAllVehicles_result__isset;

class SemanticQueryService_getAllVehicles_result {
 public:

  static const char* ascii_fingerprint; // = "97AD741E0976C96D92F4D3166AAF1066";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xAD,0x74,0x1E,0x09,0x76,0xC9,0x6D,0x92,0xF4,0xD3,0x16,0x6A,0xAF,0x10,0x66};

  SemanticQueryService_getAllVehicles_result(const SemanticQueryService_getAllVehicles_result&);
  SemanticQueryService_getAllVehicles_result& operator=(const SemanticQueryService_getAllVehicles_result&);
  SemanticQueryService_getAllVehicles_result() {
  }

  virtual ~SemanticQueryService_getAllVehicles_result() throw();
  std::vector<Vehicle>  success;

  _SemanticQueryService_getAllVehicles_result__isset __isset;

  void __set_success(const std::vector<Vehicle> & val);

  bool operator == (const SemanticQueryService_getAllVehicles_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_getAllVehicles_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getAllVehicles_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllVehicles_result& obj);
};

typedef struct _SemanticQueryService_getAllVehicles_presult__isset {
  _SemanticQueryService_getAllVehicles_presult__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getAllVehicles_presult__isset;

class SemanticQueryService_getAllVehicles_presult {
 public:

  static const char* ascii_fingerprint; // = "97AD741E0976C96D92F4D3166AAF1066";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xAD,0x74,0x1E,0x09,0x76,0xC9,0x6D,0x92,0xF4,0xD3,0x16,0x6A,0xAF,0x10,0x66};


  virtual ~SemanticQueryService_getAllVehicles_presult() throw();
  std::vector<Vehicle> * success;

  _SemanticQueryService_getAllVehicles_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllVehicles_presult& obj);
};


class SemanticQueryService_getAllMissions_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SemanticQueryService_getAllMissions_args(const SemanticQueryService_getAllMissions_args&);
  SemanticQueryService_getAllMissions_args& operator=(const SemanticQueryService_getAllMissions_args&);
  SemanticQueryService_getAllMissions_args() {
  }

  virtual ~SemanticQueryService_getAllMissions_args() throw();

  bool operator == (const SemanticQueryService_getAllMissions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SemanticQueryService_getAllMissions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getAllMissions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllMissions_args& obj);
};


class SemanticQueryService_getAllMissions_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SemanticQueryService_getAllMissions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllMissions_pargs& obj);
};

typedef struct _SemanticQueryService_getAllMissions_result__isset {
  _SemanticQueryService_getAllMissions_result__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getAllMissions_result__isset;

class SemanticQueryService_getAllMissions_result {
 public:

  static const char* ascii_fingerprint; // = "83F10ECA30A42F9B8CB67093FBBC727F";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xF1,0x0E,0xCA,0x30,0xA4,0x2F,0x9B,0x8C,0xB6,0x70,0x93,0xFB,0xBC,0x72,0x7F};

  SemanticQueryService_getAllMissions_result(const SemanticQueryService_getAllMissions_result&);
  SemanticQueryService_getAllMissions_result& operator=(const SemanticQueryService_getAllMissions_result&);
  SemanticQueryService_getAllMissions_result() {
  }

  virtual ~SemanticQueryService_getAllMissions_result() throw();
  std::vector<MissionTag>  success;

  _SemanticQueryService_getAllMissions_result__isset __isset;

  void __set_success(const std::vector<MissionTag> & val);

  bool operator == (const SemanticQueryService_getAllMissions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_getAllMissions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getAllMissions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllMissions_result& obj);
};

typedef struct _SemanticQueryService_getAllMissions_presult__isset {
  _SemanticQueryService_getAllMissions_presult__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getAllMissions_presult__isset;

class SemanticQueryService_getAllMissions_presult {
 public:

  static const char* ascii_fingerprint; // = "83F10ECA30A42F9B8CB67093FBBC727F";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xF1,0x0E,0xCA,0x30,0xA4,0x2F,0x9B,0x8C,0xB6,0x70,0x93,0xFB,0xBC,0x72,0x7F};


  virtual ~SemanticQueryService_getAllMissions_presult() throw();
  std::vector<MissionTag> * success;

  _SemanticQueryService_getAllMissions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getAllMissions_presult& obj);
};


class SemanticQueryService_getOngoingMissions_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SemanticQueryService_getOngoingMissions_args(const SemanticQueryService_getOngoingMissions_args&);
  SemanticQueryService_getOngoingMissions_args& operator=(const SemanticQueryService_getOngoingMissions_args&);
  SemanticQueryService_getOngoingMissions_args() {
  }

  virtual ~SemanticQueryService_getOngoingMissions_args() throw();

  bool operator == (const SemanticQueryService_getOngoingMissions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SemanticQueryService_getOngoingMissions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getOngoingMissions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getOngoingMissions_args& obj);
};


class SemanticQueryService_getOngoingMissions_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SemanticQueryService_getOngoingMissions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getOngoingMissions_pargs& obj);
};

typedef struct _SemanticQueryService_getOngoingMissions_result__isset {
  _SemanticQueryService_getOngoingMissions_result__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getOngoingMissions_result__isset;

class SemanticQueryService_getOngoingMissions_result {
 public:

  static const char* ascii_fingerprint; // = "83F10ECA30A42F9B8CB67093FBBC727F";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xF1,0x0E,0xCA,0x30,0xA4,0x2F,0x9B,0x8C,0xB6,0x70,0x93,0xFB,0xBC,0x72,0x7F};

  SemanticQueryService_getOngoingMissions_result(const SemanticQueryService_getOngoingMissions_result&);
  SemanticQueryService_getOngoingMissions_result& operator=(const SemanticQueryService_getOngoingMissions_result&);
  SemanticQueryService_getOngoingMissions_result() {
  }

  virtual ~SemanticQueryService_getOngoingMissions_result() throw();
  std::vector<MissionTag>  success;

  _SemanticQueryService_getOngoingMissions_result__isset __isset;

  void __set_success(const std::vector<MissionTag> & val);

  bool operator == (const SemanticQueryService_getOngoingMissions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_getOngoingMissions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getOngoingMissions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getOngoingMissions_result& obj);
};

typedef struct _SemanticQueryService_getOngoingMissions_presult__isset {
  _SemanticQueryService_getOngoingMissions_presult__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getOngoingMissions_presult__isset;

class SemanticQueryService_getOngoingMissions_presult {
 public:

  static const char* ascii_fingerprint; // = "83F10ECA30A42F9B8CB67093FBBC727F";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xF1,0x0E,0xCA,0x30,0xA4,0x2F,0x9B,0x8C,0xB6,0x70,0x93,0xFB,0xBC,0x72,0x7F};


  virtual ~SemanticQueryService_getOngoingMissions_presult() throw();
  std::vector<MissionTag> * success;

  _SemanticQueryService_getOngoingMissions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getOngoingMissions_presult& obj);
};

typedef struct _SemanticQueryService_getVehicle_args__isset {
  _SemanticQueryService_getVehicle_args__isset() : vid(false) {}
  bool vid :1;
} _SemanticQueryService_getVehicle_args__isset;

class SemanticQueryService_getVehicle_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SemanticQueryService_getVehicle_args(const SemanticQueryService_getVehicle_args&);
  SemanticQueryService_getVehicle_args& operator=(const SemanticQueryService_getVehicle_args&);
  SemanticQueryService_getVehicle_args() : vid(0) {
  }

  virtual ~SemanticQueryService_getVehicle_args() throw();
  int32_t vid;

  _SemanticQueryService_getVehicle_args__isset __isset;

  void __set_vid(const int32_t val);

  bool operator == (const SemanticQueryService_getVehicle_args & rhs) const
  {
    if (!(vid == rhs.vid))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_getVehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getVehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getVehicle_args& obj);
};


class SemanticQueryService_getVehicle_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SemanticQueryService_getVehicle_pargs() throw();
  const int32_t* vid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getVehicle_pargs& obj);
};

typedef struct _SemanticQueryService_getVehicle_result__isset {
  _SemanticQueryService_getVehicle_result__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getVehicle_result__isset;

class SemanticQueryService_getVehicle_result {
 public:

  static const char* ascii_fingerprint; // = "A98C5B9F1C80627F2A5919785594A5D8";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x8C,0x5B,0x9F,0x1C,0x80,0x62,0x7F,0x2A,0x59,0x19,0x78,0x55,0x94,0xA5,0xD8};

  SemanticQueryService_getVehicle_result(const SemanticQueryService_getVehicle_result&);
  SemanticQueryService_getVehicle_result& operator=(const SemanticQueryService_getVehicle_result&);
  SemanticQueryService_getVehicle_result() {
  }

  virtual ~SemanticQueryService_getVehicle_result() throw();
  Vehicle success;

  _SemanticQueryService_getVehicle_result__isset __isset;

  void __set_success(const Vehicle& val);

  bool operator == (const SemanticQueryService_getVehicle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_getVehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_getVehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getVehicle_result& obj);
};

typedef struct _SemanticQueryService_getVehicle_presult__isset {
  _SemanticQueryService_getVehicle_presult__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_getVehicle_presult__isset;

class SemanticQueryService_getVehicle_presult {
 public:

  static const char* ascii_fingerprint; // = "A98C5B9F1C80627F2A5919785594A5D8";
  static const uint8_t binary_fingerprint[16]; // = {0xA9,0x8C,0x5B,0x9F,0x1C,0x80,0x62,0x7F,0x2A,0x59,0x19,0x78,0x55,0x94,0xA5,0xD8};


  virtual ~SemanticQueryService_getVehicle_presult() throw();
  Vehicle* success;

  _SemanticQueryService_getVehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_getVehicle_presult& obj);
};

typedef struct _SemanticQueryService_queryStateVector_args__isset {
  _SemanticQueryService_queryStateVector_args__isset() : requestId(false), vehicleId(false), startTime(false), endTime(false) {}
  bool requestId :1;
  bool vehicleId :1;
  bool startTime :1;
  bool endTime :1;
} _SemanticQueryService_queryStateVector_args__isset;

class SemanticQueryService_queryStateVector_args {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  SemanticQueryService_queryStateVector_args(const SemanticQueryService_queryStateVector_args&);
  SemanticQueryService_queryStateVector_args& operator=(const SemanticQueryService_queryStateVector_args&);
  SemanticQueryService_queryStateVector_args() : requestId(0), vehicleId(0), startTime(0), endTime(0) {
  }

  virtual ~SemanticQueryService_queryStateVector_args() throw();
  int32_t requestId;
  int32_t vehicleId;
  int32_t startTime;
  int32_t endTime;

  _SemanticQueryService_queryStateVector_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_vehicleId(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_endTime(const int32_t val);

  bool operator == (const SemanticQueryService_queryStateVector_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(vehicleId == rhs.vehicleId))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_queryStateVector_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_queryStateVector_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryStateVector_args& obj);
};


class SemanticQueryService_queryStateVector_pargs {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};


  virtual ~SemanticQueryService_queryStateVector_pargs() throw();
  const int32_t* requestId;
  const int32_t* vehicleId;
  const int32_t* startTime;
  const int32_t* endTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryStateVector_pargs& obj);
};

typedef struct _SemanticQueryService_querySensorData_args__isset {
  _SemanticQueryService_querySensorData_args__isset() : requestId(false), region(false), startTime(false), endTime(false), sensorType(false) {}
  bool requestId :1;
  bool region :1;
  bool startTime :1;
  bool endTime :1;
  bool sensorType :1;
} _SemanticQueryService_querySensorData_args__isset;

class SemanticQueryService_querySensorData_args {
 public:

  static const char* ascii_fingerprint; // = "6D1E9520C159C4FF461E6558010D1648";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1E,0x95,0x20,0xC1,0x59,0xC4,0xFF,0x46,0x1E,0x65,0x58,0x01,0x0D,0x16,0x48};

  SemanticQueryService_querySensorData_args(const SemanticQueryService_querySensorData_args&);
  SemanticQueryService_querySensorData_args& operator=(const SemanticQueryService_querySensorData_args&);
  SemanticQueryService_querySensorData_args() : requestId(0), startTime(0), endTime(0), sensorType((SensorType::type)0) {
  }

  virtual ~SemanticQueryService_querySensorData_args() throw();
  int32_t requestId;
  Region region;
  int32_t startTime;
  int32_t endTime;
  SensorType::type sensorType;

  _SemanticQueryService_querySensorData_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_region(const Region& val);

  void __set_startTime(const int32_t val);

  void __set_endTime(const int32_t val);

  void __set_sensorType(const SensorType::type val);

  bool operator == (const SemanticQueryService_querySensorData_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(sensorType == rhs.sensorType))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_querySensorData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_querySensorData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_querySensorData_args& obj);
};


class SemanticQueryService_querySensorData_pargs {
 public:

  static const char* ascii_fingerprint; // = "6D1E9520C159C4FF461E6558010D1648";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1E,0x95,0x20,0xC1,0x59,0xC4,0xFF,0x46,0x1E,0x65,0x58,0x01,0x0D,0x16,0x48};


  virtual ~SemanticQueryService_querySensorData_pargs() throw();
  const int32_t* requestId;
  const Region* region;
  const int32_t* startTime;
  const int32_t* endTime;
  const SensorType::type* sensorType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_querySensorData_pargs& obj);
};

typedef struct _SemanticQueryService_queryHistoricalStateVectors_args__isset {
  _SemanticQueryService_queryHistoricalStateVectors_args__isset() : requestId(false), vehicleId(false), startTime(false), endTime(false) {}
  bool requestId :1;
  bool vehicleId :1;
  bool startTime :1;
  bool endTime :1;
} _SemanticQueryService_queryHistoricalStateVectors_args__isset;

class SemanticQueryService_queryHistoricalStateVectors_args {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};

  SemanticQueryService_queryHistoricalStateVectors_args(const SemanticQueryService_queryHistoricalStateVectors_args&);
  SemanticQueryService_queryHistoricalStateVectors_args& operator=(const SemanticQueryService_queryHistoricalStateVectors_args&);
  SemanticQueryService_queryHistoricalStateVectors_args() : requestId(0), vehicleId(0), startTime(0), endTime(0) {
  }

  virtual ~SemanticQueryService_queryHistoricalStateVectors_args() throw();
  int32_t requestId;
  int32_t vehicleId;
  int32_t startTime;
  int32_t endTime;

  _SemanticQueryService_queryHistoricalStateVectors_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_vehicleId(const int32_t val);

  void __set_startTime(const int32_t val);

  void __set_endTime(const int32_t val);

  bool operator == (const SemanticQueryService_queryHistoricalStateVectors_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(vehicleId == rhs.vehicleId))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_queryHistoricalStateVectors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_queryHistoricalStateVectors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryHistoricalStateVectors_args& obj);
};


class SemanticQueryService_queryHistoricalStateVectors_pargs {
 public:

  static const char* ascii_fingerprint; // = "154BB42C2FFD70F8B3993568C50C5613";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x4B,0xB4,0x2C,0x2F,0xFD,0x70,0xF8,0xB3,0x99,0x35,0x68,0xC5,0x0C,0x56,0x13};


  virtual ~SemanticQueryService_queryHistoricalStateVectors_pargs() throw();
  const int32_t* requestId;
  const int32_t* vehicleId;
  const int32_t* startTime;
  const int32_t* endTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryHistoricalStateVectors_pargs& obj);
};

typedef struct _SemanticQueryService_queryHistoricalSensorData_args__isset {
  _SemanticQueryService_queryHistoricalSensorData_args__isset() : requestId(false), region(false), startTime(false), endTime(false), sensorType(false) {}
  bool requestId :1;
  bool region :1;
  bool startTime :1;
  bool endTime :1;
  bool sensorType :1;
} _SemanticQueryService_queryHistoricalSensorData_args__isset;

class SemanticQueryService_queryHistoricalSensorData_args {
 public:

  static const char* ascii_fingerprint; // = "6D1E9520C159C4FF461E6558010D1648";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1E,0x95,0x20,0xC1,0x59,0xC4,0xFF,0x46,0x1E,0x65,0x58,0x01,0x0D,0x16,0x48};

  SemanticQueryService_queryHistoricalSensorData_args(const SemanticQueryService_queryHistoricalSensorData_args&);
  SemanticQueryService_queryHistoricalSensorData_args& operator=(const SemanticQueryService_queryHistoricalSensorData_args&);
  SemanticQueryService_queryHistoricalSensorData_args() : requestId(0), startTime(0), endTime(0), sensorType((SensorType::type)0) {
  }

  virtual ~SemanticQueryService_queryHistoricalSensorData_args() throw();
  int32_t requestId;
  Region region;
  int32_t startTime;
  int32_t endTime;
  SensorType::type sensorType;

  _SemanticQueryService_queryHistoricalSensorData_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_region(const Region& val);

  void __set_startTime(const int32_t val);

  void __set_endTime(const int32_t val);

  void __set_sensorType(const SensorType::type val);

  bool operator == (const SemanticQueryService_queryHistoricalSensorData_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(sensorType == rhs.sensorType))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_queryHistoricalSensorData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_queryHistoricalSensorData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryHistoricalSensorData_args& obj);
};


class SemanticQueryService_queryHistoricalSensorData_pargs {
 public:

  static const char* ascii_fingerprint; // = "6D1E9520C159C4FF461E6558010D1648";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1E,0x95,0x20,0xC1,0x59,0xC4,0xFF,0x46,0x1E,0x65,0x58,0x01,0x0D,0x16,0x48};


  virtual ~SemanticQueryService_queryHistoricalSensorData_pargs() throw();
  const int32_t* requestId;
  const Region* region;
  const int32_t* startTime;
  const int32_t* endTime;
  const SensorType::type* sensorType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_queryHistoricalSensorData_pargs& obj);
};

typedef struct _SemanticQueryService_storeEvent_args__isset {
  _SemanticQueryService_storeEvent_args__isset() : requestId(false), missionId(false), vehicleId(false), subtype(false), description(false), timeReference(false) {}
  bool requestId :1;
  bool missionId :1;
  bool vehicleId :1;
  bool subtype :1;
  bool description :1;
  bool timeReference :1;
} _SemanticQueryService_storeEvent_args__isset;

class SemanticQueryService_storeEvent_args {
 public:

  static const char* ascii_fingerprint; // = "87DBFC3735AB7B17E286A9895AC6F2A7";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xDB,0xFC,0x37,0x35,0xAB,0x7B,0x17,0xE2,0x86,0xA9,0x89,0x5A,0xC6,0xF2,0xA7};

  SemanticQueryService_storeEvent_args(const SemanticQueryService_storeEvent_args&);
  SemanticQueryService_storeEvent_args& operator=(const SemanticQueryService_storeEvent_args&);
  SemanticQueryService_storeEvent_args() : requestId(0), missionId(0), vehicleId(0), subtype(0), description(), timeReference(0) {
  }

  virtual ~SemanticQueryService_storeEvent_args() throw();
  int32_t requestId;
  int32_t missionId;
  int32_t vehicleId;
  int32_t subtype;
  std::string description;
  int64_t timeReference;

  _SemanticQueryService_storeEvent_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_missionId(const int32_t val);

  void __set_vehicleId(const int32_t val);

  void __set_subtype(const int32_t val);

  void __set_description(const std::string& val);

  void __set_timeReference(const int64_t val);

  bool operator == (const SemanticQueryService_storeEvent_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(missionId == rhs.missionId))
      return false;
    if (!(vehicleId == rhs.vehicleId))
      return false;
    if (!(subtype == rhs.subtype))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(timeReference == rhs.timeReference))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_storeEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_storeEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_storeEvent_args& obj);
};


class SemanticQueryService_storeEvent_pargs {
 public:

  static const char* ascii_fingerprint; // = "87DBFC3735AB7B17E286A9895AC6F2A7";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xDB,0xFC,0x37,0x35,0xAB,0x7B,0x17,0xE2,0x86,0xA9,0x89,0x5A,0xC6,0xF2,0xA7};


  virtual ~SemanticQueryService_storeEvent_pargs() throw();
  const int32_t* requestId;
  const int32_t* missionId;
  const int32_t* vehicleId;
  const int32_t* subtype;
  const std::string* description;
  const int64_t* timeReference;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_storeEvent_pargs& obj);
};


class SemanticQueryService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SemanticQueryService_ping_args(const SemanticQueryService_ping_args&);
  SemanticQueryService_ping_args& operator=(const SemanticQueryService_ping_args&);
  SemanticQueryService_ping_args() {
  }

  virtual ~SemanticQueryService_ping_args() throw();

  bool operator == (const SemanticQueryService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SemanticQueryService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_ping_args& obj);
};


class SemanticQueryService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SemanticQueryService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_ping_pargs& obj);
};

typedef struct _SemanticQueryService_ping_result__isset {
  _SemanticQueryService_ping_result__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_ping_result__isset;

class SemanticQueryService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  SemanticQueryService_ping_result(const SemanticQueryService_ping_result&);
  SemanticQueryService_ping_result& operator=(const SemanticQueryService_ping_result&);
  SemanticQueryService_ping_result() : success() {
  }

  virtual ~SemanticQueryService_ping_result() throw();
  std::string success;

  _SemanticQueryService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SemanticQueryService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SemanticQueryService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SemanticQueryService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_ping_result& obj);
};

typedef struct _SemanticQueryService_ping_presult__isset {
  _SemanticQueryService_ping_presult__isset() : success(false) {}
  bool success :1;
} _SemanticQueryService_ping_presult__isset;

class SemanticQueryService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~SemanticQueryService_ping_presult() throw();
  std::string* success;

  _SemanticQueryService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SemanticQueryService_ping_presult& obj);
};

class SemanticQueryServiceClient : virtual public SemanticQueryServiceIf {
 public:
  SemanticQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SemanticQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAllVehicles(std::vector<Vehicle> & _return);
  void send_getAllVehicles();
  void recv_getAllVehicles(std::vector<Vehicle> & _return);
  void getAllMissions(std::vector<MissionTag> & _return);
  void send_getAllMissions();
  void recv_getAllMissions(std::vector<MissionTag> & _return);
  void getOngoingMissions(std::vector<MissionTag> & _return);
  void send_getOngoingMissions();
  void recv_getOngoingMissions(std::vector<MissionTag> & _return);
  void getVehicle(Vehicle& _return, const int32_t vid);
  void send_getVehicle(const int32_t vid);
  void recv_getVehicle(Vehicle& _return);
  void queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime);
  void send_queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime);
  void querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType);
  void send_querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType);
  void queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime);
  void send_queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime);
  void queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType);
  void send_queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType);
  void storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference);
  void send_storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference);
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SemanticQueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SemanticQueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SemanticQueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAllVehicles(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllMissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOngoingMissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryStateVector(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySensorData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryHistoricalStateVectors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryHistoricalSensorData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storeEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SemanticQueryServiceProcessor(boost::shared_ptr<SemanticQueryServiceIf> iface) :
    iface_(iface) {
    processMap_["getAllVehicles"] = &SemanticQueryServiceProcessor::process_getAllVehicles;
    processMap_["getAllMissions"] = &SemanticQueryServiceProcessor::process_getAllMissions;
    processMap_["getOngoingMissions"] = &SemanticQueryServiceProcessor::process_getOngoingMissions;
    processMap_["getVehicle"] = &SemanticQueryServiceProcessor::process_getVehicle;
    processMap_["queryStateVector"] = &SemanticQueryServiceProcessor::process_queryStateVector;
    processMap_["querySensorData"] = &SemanticQueryServiceProcessor::process_querySensorData;
    processMap_["queryHistoricalStateVectors"] = &SemanticQueryServiceProcessor::process_queryHistoricalStateVectors;
    processMap_["queryHistoricalSensorData"] = &SemanticQueryServiceProcessor::process_queryHistoricalSensorData;
    processMap_["storeEvent"] = &SemanticQueryServiceProcessor::process_storeEvent;
    processMap_["ping"] = &SemanticQueryServiceProcessor::process_ping;
  }

  virtual ~SemanticQueryServiceProcessor() {}
};

class SemanticQueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SemanticQueryServiceProcessorFactory(const ::boost::shared_ptr< SemanticQueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SemanticQueryServiceIfFactory > handlerFactory_;
};

class SemanticQueryServiceMultiface : virtual public SemanticQueryServiceIf {
 public:
  SemanticQueryServiceMultiface(std::vector<boost::shared_ptr<SemanticQueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SemanticQueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SemanticQueryServiceIf> > ifaces_;
  SemanticQueryServiceMultiface() {}
  void add(boost::shared_ptr<SemanticQueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAllVehicles(std::vector<Vehicle> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllVehicles(_return);
    }
    ifaces_[i]->getAllVehicles(_return);
    return;
  }

  void getAllMissions(std::vector<MissionTag> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllMissions(_return);
    }
    ifaces_[i]->getAllMissions(_return);
    return;
  }

  void getOngoingMissions(std::vector<MissionTag> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOngoingMissions(_return);
    }
    ifaces_[i]->getOngoingMissions(_return);
    return;
  }

  void getVehicle(Vehicle& _return, const int32_t vid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVehicle(_return, vid);
    }
    ifaces_[i]->getVehicle(_return, vid);
    return;
  }

  void queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryStateVector(requestId, vehicleId, startTime, endTime);
    }
    ifaces_[i]->queryStateVector(requestId, vehicleId, startTime, endTime);
  }

  void querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySensorData(requestId, region, startTime, endTime, sensorType);
    }
    ifaces_[i]->querySensorData(requestId, region, startTime, endTime, sensorType);
  }

  void queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryHistoricalStateVectors(requestId, vehicleId, startTime, endTime);
    }
    ifaces_[i]->queryHistoricalStateVectors(requestId, vehicleId, startTime, endTime);
  }

  void queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryHistoricalSensorData(requestId, region, startTime, endTime, sensorType);
    }
    ifaces_[i]->queryHistoricalSensorData(requestId, region, startTime, endTime, sensorType);
  }

  void storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
    }
    ifaces_[i]->storeEvent(requestId, missionId, vehicleId, subtype, description, timeReference);
  }

  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};

} // namespace

#endif
