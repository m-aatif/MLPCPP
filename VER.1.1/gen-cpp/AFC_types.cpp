/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AFC_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace afarcloud {

int _kVehicleTypeValues[] = {
  VehicleType::AUAV,
  VehicleType::RUAV,
  VehicleType::AGV,
  VehicleType::RGV
};
const char* _kVehicleTypeNames[] = {
  "AUAV",
  "RUAV",
  "AGV",
  "RGV"
};
const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kVehicleTypeValues, _kVehicleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskTypeValues[] = {
  TaskType::TRANSIT,
  TaskType::SURVEY,
  TaskType::INSPECT,
  TaskType::HOTPOINT,
  TaskType::FOLLOW_TARGET,
  TaskType::ACTIVE_TRACK,
  TaskType::PANORAMA
};
const char* _kTaskTypeNames[] = {
  "TRANSIT",
  "SURVEY",
  "INSPECT",
  "HOTPOINT",
  "FOLLOW_TARGET",
  "ACTIVE_TRACK",
  "PANORAMA"
};
const std::map<int, const char*> _TaskType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kTaskTypeValues, _kTaskTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCommandTypeValues[] = {
  CommandType::NAV_TAKEOFF,
  CommandType::NAV_LAND,
  CommandType::NAV_WAYPOINT,
  CommandType::CAMERA_IMAGE,
  CommandType::VIDEO_START_CAPTURE,
  CommandType::VIDEO_STOP_CAPTURE,
  CommandType::NAV_HOTPOINT,
  CommandType::NAV_FOLLOW_TARGET,
  CommandType::NAV_TRACK_SUBJECT,
  CommandType::CAMERA_PANORAMA,
  CommandType::NAV_HOME
};
const char* _kCommandTypeNames[] = {
  "NAV_TAKEOFF",
  "NAV_LAND",
  "NAV_WAYPOINT",
  "CAMERA_IMAGE",
  "VIDEO_START_CAPTURE",
  "VIDEO_STOP_CAPTURE",
  "NAV_HOTPOINT",
  "NAV_FOLLOW_TARGET",
  "NAV_TRACK_SUBJECT",
  "CAMERA_PANORAMA",
  "NAV_HOME"
};
const std::map<int, const char*> _CommandType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(11, _kCommandTypeValues, _kCommandTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskCommandStatusValues[] = {
  TaskCommandStatus::NotAssigned,
  TaskCommandStatus::NotStarted,
  TaskCommandStatus::Running,
  TaskCommandStatus::Finished,
  TaskCommandStatus::Stopped
};
const char* _kTaskCommandStatusNames[] = {
  "NotAssigned",
  "NotStarted",
  "Running",
  "Finished",
  "Stopped"
};
const std::map<int, const char*> _TaskCommandStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaskCommandStatusValues, _kTaskCommandStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaskRegionTypeValues[] = {
  TaskRegionType::Point,
  TaskRegionType::Column,
  TaskRegionType::Area,
  TaskRegionType::Circle,
  TaskRegionType::Dynamic
};
const char* _kTaskRegionTypeNames[] = {
  "Point",
  "Column",
  "Area",
  "Circle",
  "Dynamic"
};
const std::map<int, const char*> _TaskRegionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaskRegionTypeValues, _kTaskRegionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEquipmentTypeValues[] = {
  EquipmentType::CAMERA_360,
  EquipmentType::CAMERA_PHOTO,
  EquipmentType::CAMERA_VIDEO,
  EquipmentType::IR_CAMERA_PHOTO,
  EquipmentType::IR_CAMERA_VIDEO,
  EquipmentType::WIFI,
  EquipmentType::COLLISION_AVOIDANCE
};
const char* _kEquipmentTypeNames[] = {
  "CAMERA_360",
  "CAMERA_PHOTO",
  "CAMERA_VIDEO",
  "IR_CAMERA_PHOTO",
  "IR_CAMERA_VIDEO",
  "WIFI",
  "COLLISION_AVOIDANCE"
};
const std::map<int, const char*> _EquipmentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kEquipmentTypeValues, _kEquipmentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSensorTypeValues[] = {
  SensorType::HUMIDITY,
  SensorType::COLLAR,
  SensorType::PRESSURE
};
const char* _kSensorTypeNames[] = {
  "HUMIDITY",
  "COLLAR",
  "PRESSURE"
};
const std::map<int, const char*> _SensorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kSensorTypeValues, _kSensorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Position::~Position() throw() {
}


void Position::__set_longitude(const double val) {
  this->longitude = val;
}

void Position::__set_latitude(const double val) {
  this->latitude = val;
}

void Position::__set_altitude(const double val) {
  this->altitude = val;
}

const char* Position::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Position::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Position::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Position::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Position");

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Position &a, Position &b) {
  using ::std::swap;
  swap(a.longitude, b.longitude);
  swap(a.latitude, b.latitude);
  swap(a.altitude, b.altitude);
  swap(a.__isset, b.__isset);
}

Position::Position(const Position& other0) {
  longitude = other0.longitude;
  latitude = other0.latitude;
  altitude = other0.altitude;
  __isset = other0.__isset;
}
Position& Position::operator=(const Position& other1) {
  longitude = other1.longitude;
  latitude = other1.latitude;
  altitude = other1.altitude;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Position& obj) {
  using apache::thrift::to_string;
  out << "Position(";
  out << "longitude=" << to_string(obj.longitude);
  out << ", " << "latitude=" << to_string(obj.latitude);
  out << ", " << "altitude=" << to_string(obj.altitude);
  out << ")";
  return out;
}


Orientation::~Orientation() throw() {
}


void Orientation::__set_roll(const double val) {
  this->roll = val;
}

void Orientation::__set_pitch(const double val) {
  this->pitch = val;
}

void Orientation::__set_yaw(const double val) {
  this->yaw = val;
}

const char* Orientation::ascii_fingerprint = "EFFAD640FBA2CA56C50155B2A4545897";
const uint8_t Orientation::binary_fingerprint[16] = {0xEF,0xFA,0xD6,0x40,0xFB,0xA2,0xCA,0x56,0xC5,0x01,0x55,0xB2,0xA4,0x54,0x58,0x97};

uint32_t Orientation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->roll);
          this->__isset.roll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pitch);
          this->__isset.pitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yaw);
          this->__isset.yaw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Orientation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Orientation");

  xfer += oprot->writeFieldBegin("roll", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->roll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pitch", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->pitch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yaw", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->yaw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Orientation &a, Orientation &b) {
  using ::std::swap;
  swap(a.roll, b.roll);
  swap(a.pitch, b.pitch);
  swap(a.yaw, b.yaw);
  swap(a.__isset, b.__isset);
}

Orientation::Orientation(const Orientation& other2) {
  roll = other2.roll;
  pitch = other2.pitch;
  yaw = other2.yaw;
  __isset = other2.__isset;
}
Orientation& Orientation::operator=(const Orientation& other3) {
  roll = other3.roll;
  pitch = other3.pitch;
  yaw = other3.yaw;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Orientation& obj) {
  using apache::thrift::to_string;
  out << "Orientation(";
  out << "roll=" << to_string(obj.roll);
  out << ", " << "pitch=" << to_string(obj.pitch);
  out << ", " << "yaw=" << to_string(obj.yaw);
  out << ")";
  return out;
}


Region::~Region() throw() {
}


void Region::__set_area(const std::vector<Position> & val) {
  this->area = val;
}

const char* Region::ascii_fingerprint = "CA3A04F6586943FB009547C6AECE5B89";
const uint8_t Region::binary_fingerprint[16] = {0xCA,0x3A,0x04,0xF6,0x58,0x69,0x43,0xFB,0x00,0x95,0x47,0xC6,0xAE,0xCE,0x5B,0x89};

uint32_t Region::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->area.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->area.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->area[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Region::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Region");

  xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->area.size()));
    std::vector<Position> ::const_iterator _iter9;
    for (_iter9 = this->area.begin(); _iter9 != this->area.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Region &a, Region &b) {
  using ::std::swap;
  swap(a.area, b.area);
  swap(a.__isset, b.__isset);
}

Region::Region(const Region& other10) {
  area = other10.area;
  __isset = other10.__isset;
}
Region& Region::operator=(const Region& other11) {
  area = other11.area;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Region& obj) {
  using apache::thrift::to_string;
  out << "Region(";
  out << "area=" << to_string(obj.area);
  out << ")";
  return out;
}


Battery::~Battery() throw() {
}


void Battery::__set_batteryCapacity(const double val) {
  this->batteryCapacity = val;
}

void Battery::__set_batteryPercentage(const double val) {
  this->batteryPercentage = val;
}

const char* Battery::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t Battery::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t Battery::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->batteryCapacity);
          this->__isset.batteryCapacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->batteryPercentage);
          this->__isset.batteryPercentage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Battery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Battery");

  xfer += oprot->writeFieldBegin("batteryCapacity", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->batteryCapacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("batteryPercentage", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->batteryPercentage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Battery &a, Battery &b) {
  using ::std::swap;
  swap(a.batteryCapacity, b.batteryCapacity);
  swap(a.batteryPercentage, b.batteryPercentage);
  swap(a.__isset, b.__isset);
}

Battery::Battery(const Battery& other12) {
  batteryCapacity = other12.batteryCapacity;
  batteryPercentage = other12.batteryPercentage;
  __isset = other12.__isset;
}
Battery& Battery::operator=(const Battery& other13) {
  batteryCapacity = other13.batteryCapacity;
  batteryPercentage = other13.batteryPercentage;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Battery& obj) {
  using apache::thrift::to_string;
  out << "Battery(";
  out << "batteryCapacity=" << to_string(obj.batteryCapacity);
  out << ", " << "batteryPercentage=" << to_string(obj.batteryPercentage);
  out << ")";
  return out;
}


StateVector::~StateVector() throw() {
}


void StateVector::__set_vehicleId(const int32_t val) {
  this->vehicleId = val;
}

void StateVector::__set_position(const Position& val) {
  this->position = val;
}

void StateVector::__set_orientation(const Orientation& val) {
  this->orientation = val;
}

void StateVector::__set_gimbalPitch(const double val) {
  this->gimbalPitch = val;
__isset.gimbalPitch = true;
}

void StateVector::__set_battery(const Battery& val) {
  this->battery = val;
__isset.battery = true;
}

void StateVector::__set_linearSpeed(const double val) {
  this->linearSpeed = val;
}

void StateVector::__set_lastUpdate(const int64_t val) {
  this->lastUpdate = val;
}

const char* StateVector::ascii_fingerprint = "F6F53304F1C21F736955393350523024";
const uint8_t StateVector::binary_fingerprint[16] = {0xF6,0xF5,0x33,0x04,0xF1,0xC2,0x1F,0x73,0x69,0x55,0x39,0x33,0x50,0x52,0x30,0x24};

uint32_t StateVector::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->position.read(iprot);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->orientation.read(iprot);
          this->__isset.orientation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gimbalPitch);
          this->__isset.gimbalPitch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->battery.read(iprot);
          this->__isset.battery = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->linearSpeed);
          this->__isset.linearSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastUpdate);
          this->__isset.lastUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StateVector::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StateVector");

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->position.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orientation", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->orientation.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.gimbalPitch) {
    xfer += oprot->writeFieldBegin("gimbalPitch", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->gimbalPitch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.battery) {
    xfer += oprot->writeFieldBegin("battery", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->battery.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("linearSpeed", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->linearSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdate", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->lastUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StateVector &a, StateVector &b) {
  using ::std::swap;
  swap(a.vehicleId, b.vehicleId);
  swap(a.position, b.position);
  swap(a.orientation, b.orientation);
  swap(a.gimbalPitch, b.gimbalPitch);
  swap(a.battery, b.battery);
  swap(a.linearSpeed, b.linearSpeed);
  swap(a.lastUpdate, b.lastUpdate);
  swap(a.__isset, b.__isset);
}

StateVector::StateVector(const StateVector& other14) {
  vehicleId = other14.vehicleId;
  position = other14.position;
  orientation = other14.orientation;
  gimbalPitch = other14.gimbalPitch;
  battery = other14.battery;
  linearSpeed = other14.linearSpeed;
  lastUpdate = other14.lastUpdate;
  __isset = other14.__isset;
}
StateVector& StateVector::operator=(const StateVector& other15) {
  vehicleId = other15.vehicleId;
  position = other15.position;
  orientation = other15.orientation;
  gimbalPitch = other15.gimbalPitch;
  battery = other15.battery;
  linearSpeed = other15.linearSpeed;
  lastUpdate = other15.lastUpdate;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StateVector& obj) {
  using apache::thrift::to_string;
  out << "StateVector(";
  out << "vehicleId=" << to_string(obj.vehicleId);
  out << ", " << "position=" << to_string(obj.position);
  out << ", " << "orientation=" << to_string(obj.orientation);
  out << ", " << "gimbalPitch="; (obj.__isset.gimbalPitch ? (out << to_string(obj.gimbalPitch)) : (out << "<null>"));
  out << ", " << "battery="; (obj.__isset.battery ? (out << to_string(obj.battery)) : (out << "<null>"));
  out << ", " << "linearSpeed=" << to_string(obj.linearSpeed);
  out << ", " << "lastUpdate=" << to_string(obj.lastUpdate);
  out << ")";
  return out;
}


Equipment::~Equipment() throw() {
}


void Equipment::__set_type(const EquipmentType::type val) {
  this->type = val;
}

void Equipment::__set_name(const std::string& val) {
  this->name = val;
}

const char* Equipment::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t Equipment::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t Equipment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->type = (EquipmentType::type)ecast16;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Equipment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Equipment");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Equipment &a, Equipment &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

Equipment::Equipment(const Equipment& other17) {
  type = other17.type;
  name = other17.name;
  __isset = other17.__isset;
}
Equipment& Equipment::operator=(const Equipment& other18) {
  type = other18.type;
  name = other18.name;
  __isset = other18.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Equipment& obj) {
  using apache::thrift::to_string;
  out << "Equipment(";
  out << "type=" << to_string(obj.type);
  out << ", " << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


Vehicle::~Vehicle() throw() {
}


void Vehicle::__set_id(const int32_t val) {
  this->id = val;
}

void Vehicle::__set_name(const std::string& val) {
  this->name = val;
}

void Vehicle::__set_type(const VehicleType::type val) {
  this->type = val;
}

void Vehicle::__set_maxSpeed(const double val) {
  this->maxSpeed = val;
}

void Vehicle::__set_maxRunningTime(const int32_t val) {
  this->maxRunningTime = val;
}

void Vehicle::__set_equipments(const std::vector<Equipment> & val) {
  this->equipments = val;
}

void Vehicle::__set_capabilities(const std::vector<TaskType::type> & val) {
  this->capabilities = val;
}

void Vehicle::__set_stateVector(const StateVector& val) {
  this->stateVector = val;
}

void Vehicle::__set_safetyDistance(const double val) {
  this->safetyDistance = val;
}

const char* Vehicle::ascii_fingerprint = "F05870B1DF0D3CFFDFAAF8FB73237CF0";
const uint8_t Vehicle::binary_fingerprint[16] = {0xF0,0x58,0x70,0xB1,0xDF,0x0D,0x3C,0xFF,0xDF,0xAA,0xF8,0xFB,0x73,0x23,0x7C,0xF0};

uint32_t Vehicle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->type = (VehicleType::type)ecast19;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxSpeed);
          this->__isset.maxSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxRunningTime);
          this->__isset.maxRunningTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->equipments.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->equipments.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->equipments[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.equipments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->capabilities.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->capabilities.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              int32_t ecast30;
              xfer += iprot->readI32(ecast30);
              this->capabilities[_i29] = (TaskType::type)ecast30;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.capabilities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stateVector.read(iprot);
          this->__isset.stateVector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->safetyDistance);
          this->__isset.safetyDistance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vehicle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Vehicle");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxSpeed", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->maxSpeed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxRunningTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->maxRunningTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("equipments", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->equipments.size()));
    std::vector<Equipment> ::const_iterator _iter31;
    for (_iter31 = this->equipments.begin(); _iter31 != this->equipments.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capabilities", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->capabilities.size()));
    std::vector<TaskType::type> ::const_iterator _iter32;
    for (_iter32 = this->capabilities.begin(); _iter32 != this->capabilities.end(); ++_iter32)
    {
      xfer += oprot->writeI32((int32_t)(*_iter32));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stateVector", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->stateVector.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("safetyDistance", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->safetyDistance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Vehicle &a, Vehicle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.type, b.type);
  swap(a.maxSpeed, b.maxSpeed);
  swap(a.maxRunningTime, b.maxRunningTime);
  swap(a.equipments, b.equipments);
  swap(a.capabilities, b.capabilities);
  swap(a.stateVector, b.stateVector);
  swap(a.safetyDistance, b.safetyDistance);
  swap(a.__isset, b.__isset);
}

Vehicle::Vehicle(const Vehicle& other33) {
  id = other33.id;
  name = other33.name;
  type = other33.type;
  maxSpeed = other33.maxSpeed;
  maxRunningTime = other33.maxRunningTime;
  equipments = other33.equipments;
  capabilities = other33.capabilities;
  stateVector = other33.stateVector;
  safetyDistance = other33.safetyDistance;
  __isset = other33.__isset;
}
Vehicle& Vehicle::operator=(const Vehicle& other34) {
  id = other34.id;
  name = other34.name;
  type = other34.type;
  maxSpeed = other34.maxSpeed;
  maxRunningTime = other34.maxRunningTime;
  equipments = other34.equipments;
  capabilities = other34.capabilities;
  stateVector = other34.stateVector;
  safetyDistance = other34.safetyDistance;
  __isset = other34.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Vehicle& obj) {
  using apache::thrift::to_string;
  out << "Vehicle(";
  out << "id=" << to_string(obj.id);
  out << ", " << "name=" << to_string(obj.name);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "maxSpeed=" << to_string(obj.maxSpeed);
  out << ", " << "maxRunningTime=" << to_string(obj.maxRunningTime);
  out << ", " << "equipments=" << to_string(obj.equipments);
  out << ", " << "capabilities=" << to_string(obj.capabilities);
  out << ", " << "stateVector=" << to_string(obj.stateVector);
  out << ", " << "safetyDistance=" << to_string(obj.safetyDistance);
  out << ")";
  return out;
}


TaskTemplate::~TaskTemplate() throw() {
}


void TaskTemplate::__set_taskType(const TaskType::type val) {
  this->taskType = val;
}

void TaskTemplate::__set_description(const std::string& val) {
  this->description = val;
}

void TaskTemplate::__set_regionType(const TaskRegionType::type val) {
  this->regionType = val;
}

void TaskTemplate::__set_requiredTypes(const std::vector<EquipmentType::type> & val) {
  this->requiredTypes = val;
}

void TaskTemplate::__set_maxSpeed(const double val) {
  this->maxSpeed = val;
__isset.maxSpeed = true;
}

const char* TaskTemplate::ascii_fingerprint = "A4DB297FB0895E3E5A95CEA7C00C0886";
const uint8_t TaskTemplate::binary_fingerprint[16] = {0xA4,0xDB,0x29,0x7F,0xB0,0x89,0x5E,0x3E,0x5A,0x95,0xCE,0xA7,0xC0,0x0C,0x08,0x86};

uint32_t TaskTemplate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast35;
          xfer += iprot->readI32(ecast35);
          this->taskType = (TaskType::type)ecast35;
          this->__isset.taskType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->regionType = (TaskRegionType::type)ecast36;
          this->__isset.regionType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->requiredTypes.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->requiredTypes.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              int32_t ecast42;
              xfer += iprot->readI32(ecast42);
              this->requiredTypes[_i41] = (EquipmentType::type)ecast42;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.requiredTypes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maxSpeed);
          this->__isset.maxSpeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskTemplate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TaskTemplate");

  xfer += oprot->writeFieldBegin("taskType", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->taskType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regionType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->regionType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("requiredTypes", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->requiredTypes.size()));
    std::vector<EquipmentType::type> ::const_iterator _iter43;
    for (_iter43 = this->requiredTypes.begin(); _iter43 != this->requiredTypes.end(); ++_iter43)
    {
      xfer += oprot->writeI32((int32_t)(*_iter43));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.maxSpeed) {
    xfer += oprot->writeFieldBegin("maxSpeed", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->maxSpeed);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TaskTemplate &a, TaskTemplate &b) {
  using ::std::swap;
  swap(a.taskType, b.taskType);
  swap(a.description, b.description);
  swap(a.regionType, b.regionType);
  swap(a.requiredTypes, b.requiredTypes);
  swap(a.maxSpeed, b.maxSpeed);
  swap(a.__isset, b.__isset);
}

TaskTemplate::TaskTemplate(const TaskTemplate& other44) {
  taskType = other44.taskType;
  description = other44.description;
  regionType = other44.regionType;
  requiredTypes = other44.requiredTypes;
  maxSpeed = other44.maxSpeed;
  __isset = other44.__isset;
}
TaskTemplate& TaskTemplate::operator=(const TaskTemplate& other45) {
  taskType = other45.taskType;
  description = other45.description;
  regionType = other45.regionType;
  requiredTypes = other45.requiredTypes;
  maxSpeed = other45.maxSpeed;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TaskTemplate& obj) {
  using apache::thrift::to_string;
  out << "TaskTemplate(";
  out << "taskType=" << to_string(obj.taskType);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "regionType=" << to_string(obj.regionType);
  out << ", " << "requiredTypes=" << to_string(obj.requiredTypes);
  out << ", " << "maxSpeed="; (obj.__isset.maxSpeed ? (out << to_string(obj.maxSpeed)) : (out << "<null>"));
  out << ")";
  return out;
}


Task::~Task() throw() {
}


void Task::__set_taskTemplate(const TaskTemplate& val) {
  this->taskTemplate = val;
}

void Task::__set_id(const int32_t val) {
  this->id = val;
}

void Task::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Task::__set_area(const Region& val) {
  this->area = val;
}

void Task::__set_speed(const double val) {
  this->speed = val;
}

void Task::__set_altitude(const double val) {
  this->altitude = val;
}

void Task::__set_range(const double val) {
  this->range = val;
}

void Task::__set_timeLapse(const int32_t val) {
  this->timeLapse = val;
}

void Task::__set_bearing(const Orientation& val) {
  this->bearing = val;
}

void Task::__set_startTime(const int32_t val) {
  this->startTime = val;
}

void Task::__set_endTime(const int32_t val) {
  this->endTime = val;
}

void Task::__set_taskStatus(const TaskCommandStatus::type val) {
  this->taskStatus = val;
}

void Task::__set_assignedVehicleId(const int32_t val) {
  this->assignedVehicleId = val;
}

void Task::__set_parentTaskId(const int32_t val) {
  this->parentTaskId = val;
}

const char* Task::ascii_fingerprint = "5E6811D2AC8E789E8B6A7BBC7CC624ED";
const uint8_t Task::binary_fingerprint[16] = {0x5E,0x68,0x11,0xD2,0xAC,0x8E,0x78,0x9E,0x8B,0x6A,0x7B,0xBC,0x7C,0xC6,0x24,0xED};

uint32_t Task::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->taskTemplate.read(iprot);
          this->__isset.taskTemplate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->area.read(iprot);
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->speed);
          this->__isset.speed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->altitude);
          this->__isset.altitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->range);
          this->__isset.range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeLapse);
          this->__isset.timeLapse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->bearing.read(iprot);
          this->__isset.bearing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast46;
          xfer += iprot->readI32(ecast46);
          this->taskStatus = (TaskCommandStatus::type)ecast46;
          this->__isset.taskStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->assignedVehicleId);
          this->__isset.assignedVehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->parentTaskId);
          this->__isset.parentTaskId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Task::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Task");

  xfer += oprot->writeFieldBegin("taskTemplate", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->taskTemplate.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->area.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speed", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->speed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("altitude", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->altitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("range", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->range);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeLapse", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->timeLapse);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bearing", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->bearing.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskStatus", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->taskStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assignedVehicleId", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->assignedVehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentTaskId", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->parentTaskId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Task &a, Task &b) {
  using ::std::swap;
  swap(a.taskTemplate, b.taskTemplate);
  swap(a.id, b.id);
  swap(a.missionId, b.missionId);
  swap(a.area, b.area);
  swap(a.speed, b.speed);
  swap(a.altitude, b.altitude);
  swap(a.range, b.range);
  swap(a.timeLapse, b.timeLapse);
  swap(a.bearing, b.bearing);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.taskStatus, b.taskStatus);
  swap(a.assignedVehicleId, b.assignedVehicleId);
  swap(a.parentTaskId, b.parentTaskId);
  swap(a.__isset, b.__isset);
}

Task::Task(const Task& other47) {
  taskTemplate = other47.taskTemplate;
  id = other47.id;
  missionId = other47.missionId;
  area = other47.area;
  speed = other47.speed;
  altitude = other47.altitude;
  range = other47.range;
  timeLapse = other47.timeLapse;
  bearing = other47.bearing;
  startTime = other47.startTime;
  endTime = other47.endTime;
  taskStatus = other47.taskStatus;
  assignedVehicleId = other47.assignedVehicleId;
  parentTaskId = other47.parentTaskId;
  __isset = other47.__isset;
}
Task& Task::operator=(const Task& other48) {
  taskTemplate = other48.taskTemplate;
  id = other48.id;
  missionId = other48.missionId;
  area = other48.area;
  speed = other48.speed;
  altitude = other48.altitude;
  range = other48.range;
  timeLapse = other48.timeLapse;
  bearing = other48.bearing;
  startTime = other48.startTime;
  endTime = other48.endTime;
  taskStatus = other48.taskStatus;
  assignedVehicleId = other48.assignedVehicleId;
  parentTaskId = other48.parentTaskId;
  __isset = other48.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Task& obj) {
  using apache::thrift::to_string;
  out << "Task(";
  out << "taskTemplate=" << to_string(obj.taskTemplate);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "missionId=" << to_string(obj.missionId);
  out << ", " << "area=" << to_string(obj.area);
  out << ", " << "speed=" << to_string(obj.speed);
  out << ", " << "altitude=" << to_string(obj.altitude);
  out << ", " << "range=" << to_string(obj.range);
  out << ", " << "timeLapse=" << to_string(obj.timeLapse);
  out << ", " << "bearing=" << to_string(obj.bearing);
  out << ", " << "startTime=" << to_string(obj.startTime);
  out << ", " << "endTime=" << to_string(obj.endTime);
  out << ", " << "taskStatus=" << to_string(obj.taskStatus);
  out << ", " << "assignedVehicleId=" << to_string(obj.assignedVehicleId);
  out << ", " << "parentTaskId=" << to_string(obj.parentTaskId);
  out << ")";
  return out;
}


Command::~Command() throw() {
}


void Command::__set_relatedTask(const Task& val) {
  this->relatedTask = val;
}

void Command::__set_id(const int32_t val) {
  this->id = val;
}

void Command::__set_commandType(const CommandType::type val) {
  this->commandType = val;
}

void Command::__set_startTime(const int32_t val) {
  this->startTime = val;
}

void Command::__set_endTime(const int32_t val) {
  this->endTime = val;
}

void Command::__set_commandStatus(const TaskCommandStatus::type val) {
  this->commandStatus = val;
}

void Command::__set_params(const std::vector<double> & val) {
  this->params = val;
}

const char* Command::ascii_fingerprint = "CF8A2DEC64DE606D6C9DFE023540DF0E";
const uint8_t Command::binary_fingerprint[16] = {0xCF,0x8A,0x2D,0xEC,0x64,0xDE,0x60,0x6D,0x6C,0x9D,0xFE,0x02,0x35,0x40,0xDF,0x0E};

uint32_t Command::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->relatedTask.read(iprot);
          this->__isset.relatedTask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast49;
          xfer += iprot->readI32(ecast49);
          this->commandType = (CommandType::type)ecast49;
          this->__isset.commandType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast50;
          xfer += iprot->readI32(ecast50);
          this->commandStatus = (TaskCommandStatus::type)ecast50;
          this->__isset.commandStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->params.clear();
            uint32_t _size51;
            ::apache::thrift::protocol::TType _etype54;
            xfer += iprot->readListBegin(_etype54, _size51);
            this->params.resize(_size51);
            uint32_t _i55;
            for (_i55 = 0; _i55 < _size51; ++_i55)
            {
              xfer += iprot->readDouble(this->params[_i55]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.params = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Command::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Command");

  xfer += oprot->writeFieldBegin("relatedTask", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->relatedTask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandType", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->commandType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("commandStatus", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->commandStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("params", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->params.size()));
    std::vector<double> ::const_iterator _iter56;
    for (_iter56 = this->params.begin(); _iter56 != this->params.end(); ++_iter56)
    {
      xfer += oprot->writeDouble((*_iter56));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Command &a, Command &b) {
  using ::std::swap;
  swap(a.relatedTask, b.relatedTask);
  swap(a.id, b.id);
  swap(a.commandType, b.commandType);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.commandStatus, b.commandStatus);
  swap(a.params, b.params);
  swap(a.__isset, b.__isset);
}

Command::Command(const Command& other57) {
  relatedTask = other57.relatedTask;
  id = other57.id;
  commandType = other57.commandType;
  startTime = other57.startTime;
  endTime = other57.endTime;
  commandStatus = other57.commandStatus;
  params = other57.params;
  __isset = other57.__isset;
}
Command& Command::operator=(const Command& other58) {
  relatedTask = other58.relatedTask;
  id = other58.id;
  commandType = other58.commandType;
  startTime = other58.startTime;
  endTime = other58.endTime;
  commandStatus = other58.commandStatus;
  params = other58.params;
  __isset = other58.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Command& obj) {
  using apache::thrift::to_string;
  out << "Command(";
  out << "relatedTask=" << to_string(obj.relatedTask);
  out << ", " << "id=" << to_string(obj.id);
  out << ", " << "commandType=" << to_string(obj.commandType);
  out << ", " << "startTime=" << to_string(obj.startTime);
  out << ", " << "endTime=" << to_string(obj.endTime);
  out << ", " << "commandStatus=" << to_string(obj.commandStatus);
  out << ", " << "params=" << to_string(obj.params);
  out << ")";
  return out;
}


MissionTag::~MissionTag() throw() {
}


void MissionTag::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void MissionTag::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

const char* MissionTag::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t MissionTag::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t MissionTag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MissionTag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MissionTag");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MissionTag &a, MissionTag &b) {
  using ::std::swap;
  swap(a.missionId, b.missionId);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

MissionTag::MissionTag(const MissionTag& other59) {
  missionId = other59.missionId;
  name = other59.name;
  __isset = other59.__isset;
}
MissionTag& MissionTag::operator=(const MissionTag& other60) {
  missionId = other60.missionId;
  name = other60.name;
  __isset = other60.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MissionTag& obj) {
  using apache::thrift::to_string;
  out << "MissionTag(";
  out << "missionId=" << to_string(obj.missionId);
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ")";
  return out;
}


Mission::~Mission() throw() {
}


void Mission::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Mission::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Mission::__set_navigationArea(const Region& val) {
  this->navigationArea = val;
}

void Mission::__set_forbiddenArea(const std::vector<Region> & val) {
  this->forbiddenArea = val;
}

void Mission::__set_homeLocation(const std::vector<Position> & val) {
  this->homeLocation = val;
}

void Mission::__set_tasks(const std::vector<Task> & val) {
  this->tasks = val;
}

void Mission::__set_vehicles(const std::vector<Vehicle> & val) {
  this->vehicles = val;
}

void Mission::__set_commands(const std::vector<Command> & val) {
  this->commands = val;
__isset.commands = true;
}

const char* Mission::ascii_fingerprint = "152FB3F6AE1BA4305C7E0D98C2E2733D";
const uint8_t Mission::binary_fingerprint[16] = {0x15,0x2F,0xB3,0xF6,0xAE,0x1B,0xA4,0x30,0x5C,0x7E,0x0D,0x98,0xC2,0xE2,0x73,0x3D};

uint32_t Mission::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->navigationArea.read(iprot);
          this->__isset.navigationArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->forbiddenArea.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readListBegin(_etype64, _size61);
            this->forbiddenArea.resize(_size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              xfer += this->forbiddenArea[_i65].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.forbiddenArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->homeLocation.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->homeLocation.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->homeLocation[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.homeLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tasks.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _etype74;
            xfer += iprot->readListBegin(_etype74, _size71);
            this->tasks.resize(_size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              xfer += this->tasks[_i75].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tasks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehicles.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->vehicles.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += this->vehicles[_i80].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehicles = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commands.clear();
            uint32_t _size81;
            ::apache::thrift::protocol::TType _etype84;
            xfer += iprot->readListBegin(_etype84, _size81);
            this->commands.resize(_size81);
            uint32_t _i85;
            for (_i85 = 0; _i85 < _size81; ++_i85)
            {
              xfer += this->commands[_i85].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mission::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Mission");

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("navigationArea", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->navigationArea.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("forbiddenArea", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->forbiddenArea.size()));
    std::vector<Region> ::const_iterator _iter86;
    for (_iter86 = this->forbiddenArea.begin(); _iter86 != this->forbiddenArea.end(); ++_iter86)
    {
      xfer += (*_iter86).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("homeLocation", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->homeLocation.size()));
    std::vector<Position> ::const_iterator _iter87;
    for (_iter87 = this->homeLocation.begin(); _iter87 != this->homeLocation.end(); ++_iter87)
    {
      xfer += (*_iter87).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tasks", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tasks.size()));
    std::vector<Task> ::const_iterator _iter88;
    for (_iter88 = this->tasks.begin(); _iter88 != this->tasks.end(); ++_iter88)
    {
      xfer += (*_iter88).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicles", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vehicles.size()));
    std::vector<Vehicle> ::const_iterator _iter89;
    for (_iter89 = this->vehicles.begin(); _iter89 != this->vehicles.end(); ++_iter89)
    {
      xfer += (*_iter89).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.commands) {
    xfer += oprot->writeFieldBegin("commands", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commands.size()));
      std::vector<Command> ::const_iterator _iter90;
      for (_iter90 = this->commands.begin(); _iter90 != this->commands.end(); ++_iter90)
      {
        xfer += (*_iter90).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Mission &a, Mission &b) {
  using ::std::swap;
  swap(a.missionId, b.missionId);
  swap(a.name, b.name);
  swap(a.navigationArea, b.navigationArea);
  swap(a.forbiddenArea, b.forbiddenArea);
  swap(a.homeLocation, b.homeLocation);
  swap(a.tasks, b.tasks);
  swap(a.vehicles, b.vehicles);
  swap(a.commands, b.commands);
  swap(a.__isset, b.__isset);
}

Mission::Mission(const Mission& other91) {
  missionId = other91.missionId;
  name = other91.name;
  navigationArea = other91.navigationArea;
  forbiddenArea = other91.forbiddenArea;
  homeLocation = other91.homeLocation;
  tasks = other91.tasks;
  vehicles = other91.vehicles;
  commands = other91.commands;
  __isset = other91.__isset;
}
Mission& Mission::operator=(const Mission& other92) {
  missionId = other92.missionId;
  name = other92.name;
  navigationArea = other92.navigationArea;
  forbiddenArea = other92.forbiddenArea;
  homeLocation = other92.homeLocation;
  tasks = other92.tasks;
  vehicles = other92.vehicles;
  commands = other92.commands;
  __isset = other92.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Mission& obj) {
  using apache::thrift::to_string;
  out << "Mission(";
  out << "missionId=" << to_string(obj.missionId);
  out << ", " << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "navigationArea=" << to_string(obj.navigationArea);
  out << ", " << "forbiddenArea=" << to_string(obj.forbiddenArea);
  out << ", " << "homeLocation=" << to_string(obj.homeLocation);
  out << ", " << "tasks=" << to_string(obj.tasks);
  out << ", " << "vehicles=" << to_string(obj.vehicles);
  out << ", " << "commands="; (obj.__isset.commands ? (out << to_string(obj.commands)) : (out << "<null>"));
  out << ")";
  return out;
}


Alarm::~Alarm() throw() {
}


void Alarm::__set_alarmId(const int32_t val) {
  this->alarmId = val;
}

void Alarm::__set_vehicleId(const int32_t val) {
  this->vehicleId = val;
}

void Alarm::__set_missionId(const int32_t val) {
  this->missionId = val;
}

void Alarm::__set_alarmType(const int32_t val) {
  this->alarmType = val;
}

void Alarm::__set_alarmCode(const int32_t val) {
  this->alarmCode = val;
}

void Alarm::__set_description(const std::string& val) {
  this->description = val;
}

void Alarm::__set_time(const int64_t val) {
  this->time = val;
}

const char* Alarm::ascii_fingerprint = "073B9BBCFBD314AC8815F1B9106F4F3A";
const uint8_t Alarm::binary_fingerprint[16] = {0x07,0x3B,0x9B,0xBC,0xFB,0xD3,0x14,0xAC,0x88,0x15,0xF1,0xB9,0x10,0x6F,0x4F,0x3A};

uint32_t Alarm::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmId);
          this->__isset.alarmId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vehicleId);
          this->__isset.vehicleId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->missionId);
          this->__isset.missionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmType);
          this->__isset.alarmType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->alarmCode);
          this->__isset.alarmCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Alarm::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Alarm");

  xfer += oprot->writeFieldBegin("alarmId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->alarmId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vehicleId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("missionId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->missionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmType", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->alarmType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alarmCode", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->alarmCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Alarm &a, Alarm &b) {
  using ::std::swap;
  swap(a.alarmId, b.alarmId);
  swap(a.vehicleId, b.vehicleId);
  swap(a.missionId, b.missionId);
  swap(a.alarmType, b.alarmType);
  swap(a.alarmCode, b.alarmCode);
  swap(a.description, b.description);
  swap(a.time, b.time);
  swap(a.__isset, b.__isset);
}

Alarm::Alarm(const Alarm& other93) {
  alarmId = other93.alarmId;
  vehicleId = other93.vehicleId;
  missionId = other93.missionId;
  alarmType = other93.alarmType;
  alarmCode = other93.alarmCode;
  description = other93.description;
  time = other93.time;
  __isset = other93.__isset;
}
Alarm& Alarm::operator=(const Alarm& other94) {
  alarmId = other94.alarmId;
  vehicleId = other94.vehicleId;
  missionId = other94.missionId;
  alarmType = other94.alarmType;
  alarmCode = other94.alarmCode;
  description = other94.description;
  time = other94.time;
  __isset = other94.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Alarm& obj) {
  using apache::thrift::to_string;
  out << "Alarm(";
  out << "alarmId=" << to_string(obj.alarmId);
  out << ", " << "vehicleId=" << to_string(obj.vehicleId);
  out << ", " << "missionId=" << to_string(obj.missionId);
  out << ", " << "alarmType=" << to_string(obj.alarmType);
  out << ", " << "alarmCode=" << to_string(obj.alarmCode);
  out << ", " << "description=" << to_string(obj.description);
  out << ", " << "time=" << to_string(obj.time);
  out << ")";
  return out;
}


SensorData::~SensorData() throw() {
}


void SensorData::__set_sensorUid(const std::string& val) {
  this->sensorUid = val;
}

void SensorData::__set_sensorType(const SensorType::type val) {
  this->sensorType = val;
}

void SensorData::__set_unit(const std::string& val) {
  this->unit = val;
}

void SensorData::__set_value(const double val) {
  this->value = val;
}

void SensorData::__set_sensorPosition(const Position& val) {
  this->sensorPosition = val;
}

const char* SensorData::ascii_fingerprint = "D921FC5DD86D7B7078A851BD70656EF5";
const uint8_t SensorData::binary_fingerprint[16] = {0xD9,0x21,0xFC,0x5D,0xD8,0x6D,0x7B,0x70,0x78,0xA8,0x51,0xBD,0x70,0x65,0x6E,0xF5};

uint32_t SensorData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sensorUid);
          this->__isset.sensorUid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast95;
          xfer += iprot->readI32(ecast95);
          this->sensorType = (SensorType::type)ecast95;
          this->__isset.sensorType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sensorPosition.read(iprot);
          this->__isset.sensorPosition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SensorData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SensorData");

  xfer += oprot->writeFieldBegin("sensorUid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sensorUid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->sensorType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensorPosition", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->sensorPosition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SensorData &a, SensorData &b) {
  using ::std::swap;
  swap(a.sensorUid, b.sensorUid);
  swap(a.sensorType, b.sensorType);
  swap(a.unit, b.unit);
  swap(a.value, b.value);
  swap(a.sensorPosition, b.sensorPosition);
  swap(a.__isset, b.__isset);
}

SensorData::SensorData(const SensorData& other96) {
  sensorUid = other96.sensorUid;
  sensorType = other96.sensorType;
  unit = other96.unit;
  value = other96.value;
  sensorPosition = other96.sensorPosition;
  __isset = other96.__isset;
}
SensorData& SensorData::operator=(const SensorData& other97) {
  sensorUid = other97.sensorUid;
  sensorType = other97.sensorType;
  unit = other97.unit;
  value = other97.value;
  sensorPosition = other97.sensorPosition;
  __isset = other97.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SensorData& obj) {
  using apache::thrift::to_string;
  out << "SensorData(";
  out << "sensorUid=" << to_string(obj.sensorUid);
  out << ", " << "sensorType=" << to_string(obj.sensorType);
  out << ", " << "unit=" << to_string(obj.unit);
  out << ", " << "value=" << to_string(obj.value);
  out << ", " << "sensorPosition=" << to_string(obj.sensorPosition);
  out << ")";
  return out;
}

} // namespace
