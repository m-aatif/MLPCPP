/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PlannerService_H
#define PlannerService_H

#include <thrift/TDispatchProcessor.h>
#include "AFC_types.h"

namespace afarcloud {

class PlannerServiceIf {
 public:
  virtual ~PlannerServiceIf() {}
  virtual void computePlan(const int32_t requestId, const Mission& context) = 0;
  virtual void ping(std::string& _return) = 0;
};

class PlannerServiceIfFactory {
 public:
  typedef PlannerServiceIf Handler;

  virtual ~PlannerServiceIfFactory() {}

  virtual PlannerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PlannerServiceIf* /* handler */) = 0;
};

class PlannerServiceIfSingletonFactory : virtual public PlannerServiceIfFactory {
 public:
  PlannerServiceIfSingletonFactory(const boost::shared_ptr<PlannerServiceIf>& iface) : iface_(iface) {}
  virtual ~PlannerServiceIfSingletonFactory() {}

  virtual PlannerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PlannerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PlannerServiceIf> iface_;
};

class PlannerServiceNull : virtual public PlannerServiceIf {
 public:
  virtual ~PlannerServiceNull() {}
  void computePlan(const int32_t /* requestId */, const Mission& /* context */) {
    return;
  }
  void ping(std::string& /* _return */) {
    return;
  }
};

typedef struct _PlannerService_computePlan_args__isset {
  _PlannerService_computePlan_args__isset() : requestId(false), context(false) {}
  bool requestId :1;
  bool context :1;
} _PlannerService_computePlan_args__isset;

class PlannerService_computePlan_args {
 public:

  static const char* ascii_fingerprint; // = "45C4D5A04FE63115B611354D3401E64B";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0xC4,0xD5,0xA0,0x4F,0xE6,0x31,0x15,0xB6,0x11,0x35,0x4D,0x34,0x01,0xE6,0x4B};

  PlannerService_computePlan_args(const PlannerService_computePlan_args&);
  PlannerService_computePlan_args& operator=(const PlannerService_computePlan_args&);
  PlannerService_computePlan_args() : requestId(0) {
  }

  virtual ~PlannerService_computePlan_args() throw();
  int32_t requestId;
  Mission context;

  _PlannerService_computePlan_args__isset __isset;

  void __set_requestId(const int32_t val);

  void __set_context(const Mission& val);

  bool operator == (const PlannerService_computePlan_args & rhs) const
  {
    if (!(requestId == rhs.requestId))
      return false;
    if (!(context == rhs.context))
      return false;
    return true;
  }
  bool operator != (const PlannerService_computePlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlannerService_computePlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_computePlan_args& obj);
};


class PlannerService_computePlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "45C4D5A04FE63115B611354D3401E64B";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0xC4,0xD5,0xA0,0x4F,0xE6,0x31,0x15,0xB6,0x11,0x35,0x4D,0x34,0x01,0xE6,0x4B};


  virtual ~PlannerService_computePlan_pargs() throw();
  const int32_t* requestId;
  const Mission* context;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_computePlan_pargs& obj);
};


class PlannerService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PlannerService_ping_args(const PlannerService_ping_args&);
  PlannerService_ping_args& operator=(const PlannerService_ping_args&);
  PlannerService_ping_args() {
  }

  virtual ~PlannerService_ping_args() throw();

  bool operator == (const PlannerService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PlannerService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlannerService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_ping_args& obj);
};


class PlannerService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PlannerService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_ping_pargs& obj);
};

typedef struct _PlannerService_ping_result__isset {
  _PlannerService_ping_result__isset() : success(false) {}
  bool success :1;
} _PlannerService_ping_result__isset;

class PlannerService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  PlannerService_ping_result(const PlannerService_ping_result&);
  PlannerService_ping_result& operator=(const PlannerService_ping_result&);
  PlannerService_ping_result() : success() {
  }

  virtual ~PlannerService_ping_result() throw();
  std::string success;

  _PlannerService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const PlannerService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PlannerService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlannerService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_ping_result& obj);
};

typedef struct _PlannerService_ping_presult__isset {
  _PlannerService_ping_presult__isset() : success(false) {}
  bool success :1;
} _PlannerService_ping_presult__isset;

class PlannerService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~PlannerService_ping_presult() throw();
  std::string* success;

  _PlannerService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PlannerService_ping_presult& obj);
};

class PlannerServiceClient : virtual public PlannerServiceIf {
 public:
  PlannerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PlannerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void computePlan(const int32_t requestId, const Mission& context);
  void send_computePlan(const int32_t requestId, const Mission& context);
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PlannerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PlannerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PlannerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_computePlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PlannerServiceProcessor(boost::shared_ptr<PlannerServiceIf> iface) :
    iface_(iface) {
    processMap_["computePlan"] = &PlannerServiceProcessor::process_computePlan;
    processMap_["ping"] = &PlannerServiceProcessor::process_ping;
  }

  virtual ~PlannerServiceProcessor() {}
};

class PlannerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PlannerServiceProcessorFactory(const ::boost::shared_ptr< PlannerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PlannerServiceIfFactory > handlerFactory_;
};

class PlannerServiceMultiface : virtual public PlannerServiceIf {
 public:
  PlannerServiceMultiface(std::vector<boost::shared_ptr<PlannerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PlannerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PlannerServiceIf> > ifaces_;
  PlannerServiceMultiface() {}
  void add(boost::shared_ptr<PlannerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void computePlan(const int32_t requestId, const Mission& context) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->computePlan(requestId, context);
    }
    ifaces_[i]->computePlan(requestId, context);
  }

  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

};

} // namespace

#endif
