// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SemanticQueryService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::afarcloud;

class SemanticQueryServiceHandler : virtual public SemanticQueryServiceIf {
 public:
  SemanticQueryServiceHandler() {
    // Your initialization goes here
  }

  void getAllVehicles(std::vector<Vehicle> & _return) {
    // Your implementation goes here
    printf("getAllVehicles\n");
  }

  void getAllMissions(std::vector<MissionTag> & _return) {
    // Your implementation goes here
    printf("getAllMissions\n");
  }

  void getOngoingMissions(std::vector<MissionTag> & _return) {
    // Your implementation goes here
    printf("getOngoingMissions\n");
  }

  void getVehicle(Vehicle& _return, const int32_t vid) {
    // Your implementation goes here
    printf("getVehicle\n");
  }

  void queryStateVector(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) {
    // Your implementation goes here
    printf("queryStateVector\n");
  }

  void querySensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) {
    // Your implementation goes here
    printf("querySensorData\n");
  }

  void queryHistoricalStateVectors(const int32_t requestId, const int32_t vehicleId, const int32_t startTime, const int32_t endTime) {
    // Your implementation goes here
    printf("queryHistoricalStateVectors\n");
  }

  void queryHistoricalSensorData(const int32_t requestId, const Region& region, const int32_t startTime, const int32_t endTime, const SensorType::type sensorType) {
    // Your implementation goes here
    printf("queryHistoricalSensorData\n");
  }

  void storeEvent(const int32_t requestId, const int32_t missionId, const int32_t vehicleId, const int32_t subtype, const std::string& description, const int64_t timeReference) {
    // Your implementation goes here
    printf("storeEvent\n");
  }

  void ping(std::string& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SemanticQueryServiceHandler> handler(new SemanticQueryServiceHandler());
  shared_ptr<TProcessor> processor(new SemanticQueryServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

